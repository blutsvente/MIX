#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\setlength{\textwidth}{170mm}
\setlength{\textheight}{255mm}
\setlength{\oddsidemargin}{-5mm}
\setlength{\topmargin}{-18mm}

\usepackage{supertabular}
\usepackage{graphicx}
\usepackage{xr}

%\fontencoding{T1}
%\fontfamily{ptm}
%\fontseries{cmr}
%\fontshape{it}
%\fontsize{12}{15}
%\selectfont
\usefont{T1}{phv}{m}{n}
\selectfont

%\usepackage{aaai}
%\usepackage{times}

\title{MIX - Micronas Interconnect Specification Expander}
\author{Userreference}
\date{6.10.2003}
\end_preamble
\language english
\inputencoding latin1
\fontscheme times
\graphics default
\paperfontsize 12
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

MIX - Micronas Interconnect Spec expander
\layout Date

Author: Wilfried Gänsheimer
\newline 
$Date: 2005/10/06 11:17:28 $
\newline 
Version: $Id: MIX_Userreference.lyx,v 1.6 2005/01/26 14:01:59 wig Exp 
\layout Section

Introduction
\layout Standard

MIX is part of the registermaster tools.
 The registermaster set is comprised of a method and a tool to automatically
 derive top-level hardware description, low-level driver software and documentat
ion out of a single source structural specification is presented.
 In contrast to system-level design tools this approach focuses on structural
 properties like interconnect, hierarchy and control/status registers instead
 of refining a functional specification.
 A table-based specification format was chosen to enable efficient data
 entry and review.
 Due to automatic code generation consistency between specification and
 design is guaranteed and error-prone manual transformations can be avoided.
 This paper focuses on specification and hardware generation.
\layout Section

Management Summary
\layout Standard

MIX is a simple to use script, which creates all of a chip top level source
 files from a single input file.
 This input file is the single source description of hierachy, connectivity,
 IO wiring and internal control busses like I2C.
\layout Section

Table of Contents
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 

 
\layout Section

Installation
\layout Standard

The MIX toolset uses the Perl scripting language.
 Please install a recent version of Perl on your MS-Windows workstation,
 e.g.
 the freely available ActiveState Perl from
\family typewriter 
 S:
\backslash 
Perl
\backslash 
ActivePerl-5.8.4.*.msi
\family default 

\begin_inset Note
collapsed true

\layout Standard

MICRONAS
\end_inset 

.
 For UNIX (Solaris/Linux) no user installation is required.
 Everything needed is installed in 
\family typewriter 
/tools/mix
\family default 
.
\newline 
Start MIX from the network drive like described in the examples below.
 That will also make sure, that you are using the most recent release automatica
lly.
 After the Perl installation, you can run MIX immediately.
 Open a command shell on your desktop workstation:
\newline 
Press 
\family typewriter 
Start -> Run
\family default 
 ; type 
\family typewriter 
cmd
\family default 

\newline 
Now change to your working directory and start the generator like
\newline 

\family typewriter 

\begin_inset Note
collapsed true

\layout Standard

MICRONAS
\end_inset 

K:
\backslash 
Projects
\backslash 
MIX
\backslash 
PROG
\backslash 
mix_0.pl foo.xls
\layout Standard


\family typewriter 
TODO: Describe MUI (MIX graphical User Interface).
\layout Section

Getting Started
\layout Standard

To receive useful results, MIX reads in various input date from spreadsheets,
 typically stored in ExCEL workbooks.
 At least you will need to prepare a description of your design hierarchy
 (
\series bold 
HIER
\series default 
) and the connectivity sheet (
\series bold 
CONN
\series default 
).
 If found, MIX will convert a input/output sheet 
\series bold 
IO
\series default 
, listing input/output pads and iocells and how these are linked to the
 core logic into appropriate hierarchy and connection lists.
 The 
\family typewriter 
\series bold 
I2C
\family default 
\series default 
 sheet can be used to describe an on-chip I2C bus and it's configuration.
\layout Subsection

A simple example
\layout Standard

To understand the usage of the various tables and options, a very simple
 example is shown and extended step by step.
 The simple example just has two components 
\emph on 
a
\emph default 
 and 
\emph on 
b
\emph default 
, which are connected by the signal 
\emph on 
sigfoo
\emph default 
.
 The two instances have a common parent 
\emph on 
chip
\emph default 
.
\newline 

\begin_inset Graphics
	filename images/mix_simple_0.jpg
	lyxscale 90
	scale 90
	keepAspectRatio

\end_inset 


\newline 
 Image 1: mix_simple.xls
\newline 

\newline 
The equivalent description of this simple design in MIX is made up from
 a worksheet 
\series bold 
HIER
\series default 
.
\newline 

\begin_inset Graphics
	filename images/mix_simple_1.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
The first row defines the table headers names.
 The names have to be in the form "
\family typewriter 
::NAME
\family default 
".
 Several of the columns are required, some are optional and you can define
 additional columns on your own.
 For 
\family typewriter 
HIER
\family default 
 sheets the "
\family typewriter 
::inst
\family default 
" column is the primary key.
 One design element will be generated for each new name of an 
\family typewriter 
::inst
\family default 
 row.
 If a name is defined several times, these lines will be overloaded or summarize
d, depending on built-in rules of the MIX converter.
\newline 
The first column of all sheets has to be "
\family typewriter 
::ign
\family default 
".
 If it starts with a #, the rest of this row will be ignored.
 All other columns can be added in arbitrary order.
\newline 

\newline 
The second required worksheet is 
\series bold 
CONN
\series default 
:
\newline 

\begin_inset Graphics
	filename images/mix_simple_2.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 As you see, this worksheet also starts with the table header definition
 line.
 The primary field is the "::name" column.
 The "::in" and "::out" columns are used to define the drivers and loads
 for the signals.
\layout Subsection

Mix it!
\layout Standard

Run the MIX converter tool in the directory the excel spreadsheet is stored
 in:
\newline 
MS-Windows:
\layout Standard


\family typewriter 
$ K:
\backslash 
Projects
\backslash 
MIX
\backslash 
PROG
\backslash 
mix_0.pl foo.xls
\family default 

\newline 
UNIX:
\layout Standard


\family typewriter 
$ module load perl mix
\layout Standard


\family typewriter 
$ mix foo.xls
\family default 

\newline 
This reads in the design description and evaluates the various sheets.
 It creates output files with an intermediate excel design description (
\family typewriter 
mix_simple-mixed.xls
\family default 
) and the same data in a internal format (
\family typewriter 
mix_simple.pld
\family default 
).
 A log file (
\family typewriter 
mix_0.pl.log
\family default 
) and the HDL output files are written in the same run.
 Image 2 shows a screenshot of the 
\family typewriter 
mix_simpe.xls
\family default 
 conversion.
 Only the most important errors and warnings are written to the screen,
 while a lot of information will be written to the log file.
 Search for the keywords "ERROR" and "WARNING" to verify proper conversion.
\newline 

\newline 

\begin_inset Graphics
	filename images/mix_simple_cmd.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 
 Image 2: mix_simple conversion
\newline 
All output files are stored in the current working directory.
 Old versions of the output files are overwritten.
 Except the log file that is appended by each converter run.
 The intermediate excel description file keeps a history of previous 
\family typewriter 
HIER
\family default 
 and 
\family typewriter 
CONN
\family default 
 sheets by rotating _N extended worksheet names.
\newline 

\newline 

\begin_inset Graphics
	filename images/mix_files.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 

\layout Subsubsection

You get what you typed
\layout Standard

MIX generates various HDL files defined by the input data.
 If you select VHDL (also the default language) as output description for
 a hierarchy element, each element results in an appropriate entity, architectur
e and configuration description.
 By default MIX writes one file for all entities, one for all architecture
 and one for all configuration descriptions.
 Those file names are derived from the last excel input file name by stripping
 of the .xls extension and attaching a -e.vhd, -a.vhd and -c.vhd.
\newline 
Here the working directory of the simple example contains a file mix.cfg,
 which is the convenient storage for MIX run-time configuration options.
 The lines "
\family typewriter 
MIXCFG outarch ARCH
\family default 
", "
\family typewriter 
MIXCFG outenty ENTY
\family default 
", and "
\family typewriter 
MIXCFG outconf CONF
\family default 
" switch MIX outputs to separate files for each entity, architecture and
 configuration.
 In this case the file names are defined by the element name: 
\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="5cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Type
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Basename
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Extension
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Example
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Entity 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 ::entity-column 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 -e.vhd 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip_e-e.vhd 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Architecture 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 ::entity-column 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 -rtl-a.vhd 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip_e-rtl-a.vhd 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Configuration 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 ::entity-column 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 -c.vhd 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip_e-rtl-conf-c.vhd 
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Caption


\begin_inset Quotes eld
\end_inset 

_
\begin_inset Quotes erd
\end_inset 

 in the filenames extension are converted to 
\begin_inset Quotes eld
\end_inset 

-
\begin_inset Quotes erd
\end_inset 


\end_inset 


\layout Standard

By default MIX does not write output data for leaf blocks (instances which
 are not parent for other instances).
 Adding a line like "
\family typewriter 
MIXCFG generate.output.arch leaf
\family default 
" into the mix.cfg file changes that.
\newline 
The generated output files contain head, body and footer sections.
 See the screenshots of the file a-e-e.vhd and chip-e-rtl-a.vhd for examples
 of an entity and an architecture definition.
\newline 

\begin_inset Graphics
	filename images/mix_a-e-e.jpg
	lyxscale 55
	scale 55
	keepAspectRatio

\end_inset 


\newline 

\begin_inset Graphics
	filename images/mix_chip-e-rtl-a.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 

\layout Section

Details
\layout Subsection

Initialization with -init
\layout Standard

You can use the 
\family typewriter 
-init
\family default 
 command line option to create the needed files:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 

\backslash 
$ mix_0.pl -init foo.vhd bar.xls
\family default 

\newline 
will create the file 
\family typewriter 
bar.xls
\family default 
, which has the following three worksheet categories:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

- empty HIER, CONN and IO sheets
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

- template sheets with numerous examples TMPL_(HIER|CONN|IO)
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

- import sheets IMP_HIER and IMP_CONN (only if *.vhd or 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{11mm}
\end_inset 

 *.v files are given as command line arguments).
\newline 
You will also get a 
\family typewriter 
mix.cfg
\family default 
 file.
 If 
\family typewriter 
bar.xls
\family default 
 or 
\family typewriter 
mix.cfg
\family default 
 already exists, the command will exit without changes.
 The import of 
\family typewriter 
*.vhd
\family default 
 and 
\family typewriter 
*.v
\family default 
 files is experimental and meant to give a way of getting a start description
 of your design.
 In case of VHDL files, only entity descriptions are imported.
 Take care of getting signal names and instance names properly.
\layout Subsection

Common worksheet properties
\layout Standard

All worksheets parsed by MIX share some common properties.
 There needs to be a header line consisting only of keywords with leading
 double colon.
 All data before the header line is ignored.
 Only the first header line will be evaluated.
 Data in columns with no header or malformed headers will be ignored.
\newline 
Commonly understood table headings are 
\family typewriter 
::ign
\family default 
 and 
\family typewriter 
::comment
\family default 
.
 The 
\family typewriter 
::ign
\family default 
 column is special, because it needs to be the first column of a sheet.
 If a cell in the 
\family typewriter 
::ign
\family default 
 column starts with a 
\family typewriter 

\backslash 
#
\family default 
 or a 
\family typewriter 
//
\family default 
, the complete row is ignored.The 
\family typewriter 
::comment
\family default 
 column can contain user or program generated comments for a given row.
 It's data will be appended to it's contents as it appears.
\newline 
MIX reads the cell values.
 This is, for Excel and Star(/Open)-Office, what you see , not the real
 contents of the cells.
 Thus all formulas can be used to define the cell values (note: csv is not
 able to do that).
\newline 
A lot of predefined text macros are understood and converted by MIX.
 A text macro is made up by a name surrounded by 
\family typewriter 

\backslash 
%
\family default 
 signs.
 Retrieve a complete list of macros with the -listconf command line switch
 and grep all lines starting with "
\family typewriter 
MIXCFG macro
\family default 
".
 The table 
\family typewriter 

\backslash 
%macro
\backslash 
%
\family default 
 gives a list of predefined macros, their default settings and wether this
 macro can be used by the user.
 You can use text macros inside of any cell.
\newline 

\begin_inset Graphics
	filename images/mix_table0.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 
 A second type of macros are available to reference other columns of a like
 through 
\family typewriter 

\backslash 
%::NAME
\backslash 
%
\family default 
.
 This will be replaced by the contents of the 
\family typewriter 
::NAME
\family default 
 column of this row.
 
\family typewriter 
::NAME
\family default 
 has to be defined for the current worksheet, obviously.
 In the above example 
\family typewriter 

\backslash 
%::inst
\backslash 
%_e
\family default 
 will evaluate to 
\family typewriter 
chip_e
\family default 
, 
\family typewriter 
a_e
\family default 
 and 
\family typewriter 
b_e
\family default 
 accordingly.
 
\family typewriter 

\backslash 
%LANGUAGE
\backslash 
%
\family default 
 becomes vhdl.
 Macro expansion happens just before the intermediate design data is written
 out, after evaluation of all input data.
 Recursive macro expansion is not implemented.
 Macros in primary keys like signal and instance names are evaluated at
 signal or instance creation time.
\layout Subsection

Special Spreadsheet-format properties
\layout Standard

MIX is able to read three different table formats: csv(Comma-Seperated-Values),
 sxc(Star-Office-Spreadsheet) and xls(Excel-Spreadsheet).
 While Excel and StarOffice Spreadsheets are full featured, the csv Format
 does not understand formulas.
 This is because the real content and it's values are same in csv.
 The only colored output can(at this moment) be achieved by writing Excel-Spread
sheets(for this an already installed Excel is needed).
 While writing Excel-sheets implies Windows, reading input can be done on
 every Platform(if it got a Perl port).
 Trying to read a Excel-Sheet on non-Windows grounds will cause MIX to produce
 csv per default.
 The output format can be forced by setting 
\family typewriter 
format.out
\family default 
 to 
\family typewriter 
csv
\family default 
, 
\family typewriter 
sxc
\family default 
 or 
\family typewriter 
xls
\family default 
.
 In this case MIX will read the given input file and produce the forced
 output format.
\layout Subsection

HIER sheet properties
\layout Standard

The hierarchy of a design is defined in the HIER sheet.
 By default the HIER sheet is named HIER, but you can set the configuration
 value 
\series bold 
hier.xls
\series default 
 to a Perl regular expression.
 MIX will then consider all worksheets which names match the perl regular
 expression, to be HIER definitions.
 In that case you are free to use different header definitions on different
 sheets.
\newline 
The HIER sheets require at least the columns marked man.
 (mandatory) in the following table.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="12" columns="5">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="17mm">
<column alignment="block" valignment="top" rightline="true" width="2.5cm">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Column name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Default
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Req.
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Example
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::ign 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Ignore line, usually the first column.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
<empty>
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

# comm.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::gen 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Generator and match 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
<empty>
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 see below 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::variants 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Variant selector 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Default 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

opt.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Var1
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::parent 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Instance name of this instances parent cell 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_PARENT 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::inst 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Instance name, primary key! 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\emph on 
<n/a>
\emph default 
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 a_i1
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::lang 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Language definition 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 VHDL 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

opt.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 vhdl 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::entity 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Entity name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_ENTITY 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 a 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::config 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Configuration name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_CONFIG 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 a_rtl_conf 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::shortname 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Short name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
<empty>
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

opt.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 text 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::use 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Additional, project specific libraries for VHDL modules.
 includes and defines for Verilog.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
<empty>
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

opt.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 padlib.foo 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::comment 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Comment field 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\emph on 
<empty>
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

opt.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 text  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard

Internally the kewords 
\family typewriter 
::debug
\family default 
, 
\family typewriter 
::hierarchy
\family default 
, 
\family typewriter 
::skip
\family default 
 and 
\family typewriter 
::default
\family default 
 are used.
 Please do not use them.
 Apart from that you are free to add columns of your own.
 User defined columns are usable in 
\family typewriter 

\backslash 
%::NAME
\backslash 
%
\family default 
 macro expansion and are listed in the intermediate design data output.
\newline 
Only the 
\family typewriter 
::inst
\family default 
 column has to contain a value in each row (which could be a 
\family typewriter 

\backslash 
%::NAME
\backslash 
%
\family default 
 macro, though).
 All other columns will receive more or less reasonable default values in
 case they are left empty.
\layout Subsection

HIER columns details
\layout Standard


\series bold 
::gen
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{12mm}
\end_inset 

If a cell here is not empty, the line will be considered as
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

 generator.
 See description of generator statements below.
\newline 

\series bold 
::variants
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{6mm}
\end_inset 

Select a line depending on the -variant command line switch.
 If 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

-variant VAR is set, only lines whose 
\family typewriter 
::variant
\family default 
 cell contains the keyword 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

VAR, Default or empty, are selected and read in.
 Several variants may be 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

given in one cell, separated by ",".
 Without specifying the 
\family typewriter 
-variant
\family default 
 switch, 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

the "Default" and empty 
\family typewriter 
::variant
\family default 
 cells are read in and evaluated.
\newline 

\series bold 
::inst
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

Defines the instance name.
 If the same name appears in several rows, the 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

resulting row will be overloaded from all input rows.
 The exact behaviour 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

depends on the column name.
 Some are concatenated, some are replaced.
\newline 

\series bold 
::lang
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{9mm}
\end_inset 

HDL language selection, case insensitive.
 If this column is omitted or empty, 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

VHDL output is generated.
 The default value can be changed by means 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

of the macro.%LANGUAGE% macro.
 Currently only VHDL and
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

Verilog are supported (XXX: Verilog output still t.b.d.).
\newline 

\series bold 
::config
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{6mm}
\end_inset 

Define the configuration name.
 It defaults to %DEFAULT_CONFIG%, which 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

evaluates to %::entity%_%::arch%_conf.
 If the language of this entity is set 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

to Verilog, no configuration will be printed nor will it be added to parent
 cell 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

configurations.
 The keyword %NO_CONFIG% will also suppress output of 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

configuration for this entity.
\newline 
Additional columns:
\newline 

\series bold 
::arch
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{9mm}
\end_inset 

If no ::arch column is given, architecture will default to "rtl".
 This is defined 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

by the configuration hier.field.::arch.[3] = rtl; and cannot be changed globally.
\newline 

\series bold 
::use
\series default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{11mm}
\end_inset 

Add project specific libraries and work packages to the HDL description
 files.
 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

See the ::use details below.
\layout Subsubsection

::use: Add Project Specific Libraries
\layout Standard

The optional "
\family typewriter 
::use
\family default 
" column allows to add libraries and work packages for a entity.
 Several libraries can be added, separated by comma or white space.
 In case of VHDL output, the use statement is added to the entity declaration,
 only.
 You can override that by adding a leading 
\family typewriter 
ALL:
\family default 
, 
\family typewriter 
ARCH:
\family default 
 or 
\family typewriter 
CONF:
\family default 
 keyword for this instance/entity.
 To change that globally, modify the configuration variable output.generate.use.
\newline 
For each given library an appropriate text sequence is added:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
foo.lib
\family default 
, 
\family typewriter 
bar.lib.something
\family default 

\newline 
will be printed as
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
library foo;
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
use foo.lib.all;
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
library bar;
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
use bar.lib.something.all;
\family default 

\newline 
If different instantiations of a entity have different ::use
\newline 
definitions, MIX adds up all these.
\newline 
To change the global default value of
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
library IEEE;
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
use IEEE.std_logic_1164.all;
\family default 

\newline 
modify macro 
\family typewriter 

\backslash 
%VHDL_USE_DEFAULT
\backslash 
%
\family default 
.
\newline 
To add a library globally, add the appropriate text to the macro.
\family typewriter 

\backslash 
%VHDL_NOPROJ
\backslash 
%
\family default 
 configuration, which will be used if no library is defined in the 
\family typewriter 
::use
\family default 
 column.
\newline 
A second usage is to suppress the component declaration output by the 
\family typewriter 

\backslash 
%NDC
\backslash 
%
\family default 
 or 
\newline 

\family typewriter 

\backslash 
%NO_COMPONENT_DECLARATION
\backslash 
%
\family default 
 keyword.
 This is useful for instances, whose entities are taken from libraries.
\newline 
For verilog modules (as defined in the 
\family typewriter 
::lang
\family default 
 column) the 
\family typewriter 
::use
\family default 
 column contents will be split by newline or comma and added to the verilog
 module top.
 A typical usage is for 
\family typewriter 
`defines
\family default 
 and 
\family typewriter 
`include.
 
\family default 
The text is taken literally.
 Use the text macros %DEFINE% and %INCLUDE% if you want to avoid the backtick.
\layout Standard

Examples: see 
\family typewriter 
t/sigport.xls
\family default 
 and 
\family typewriter 
t/sigport/use/*.vhd
\family default 
 for more examples.
\newline 
Configuration parameter: 
\family typewriter 
output.generate.use = enty
\layout Subsubsection

::udc: Adding user defined code
\layout Standard

Since the release from July 2005, the MIX template provides several new
 hooks to add code into the header, body or footer of the created HDL files.
 The globally available macros %VHDL_HOOK_
\shape italic 
MODE_LOCATION
\shape default 
% and %VERILOG_HOOK_BODY% can be set to an arbitrary string.
 They will be overloaded by the instance specific ::udc text, if that is
 defined in the HIER sheet.
 The 
\emph on 
::udc
\emph default 
 cell contents will be split into several parts by markers like 
\emph on 
/%LOCATION%/
\emph default 
, by default the 
\emph on 
%BODY%
\emph default 
 tag will be used.
 
\emph on 
LOCATION
\emph default 
 can be one of 
\emph on 
HEAD, BODY
\emph default 
 or 
\emph on 
FOOT
\emph default 
, in case of VDHL architecure also 
\emph on 
DECL
\emph default 
.
 Currently the ::udc text will be evaluated for the 
\emph on 
MODE
\emph default 
 arch, only.
 Hooks are available for
\emph on 
 MODE
\emph default 
 
\emph on 
arch
\emph default 
, 
\emph on 
enty
\emph default 
 and 
\emph on 
conf
\emph default 
, though.
\layout Subsection

Special HIER sheet properties
\layout Subsubsection

Pseudo Instances %TOP% et al.
\layout Standard


\family typewriter 
%TOP%
\family default 
 is a pseudo instance and used for internal purposes, only.
 Please use testbench as the top level of your description.
 Another internally used instance is %TYPECAST% ...
\layout Subsubsection

Simple logic creation
\layout Standard

MIX will support simple logic creation when you use one of the following
 keywords as the entity of a hierachical element:
\layout Standard

%AND%, %OR%, %NAND%, %NOR%, %XOR%, %NOT%, %WIRE%
\layout Standard

%WIRE% will be handeled as connection (assignment), while the logic will
 be created with HDL logic description.
 Currently no bit-splicing is supported and appropriate bit width of busse
 will not be checked.
 Make sure only one output signal gets connected.
 See the testcase 
\begin_inset Quotes eld
\end_inset 

logic
\begin_inset Quotes erd
\end_inset 

 for an example.
\layout Subsection

CONN sheet details
\layout Standard

The design connections are defined in the CONN sheet.
 The primary key of this sheet is the signalname as given in "
\family typewriter 
::name
\family default 
".
 Signalnames are globally known for the design.
 All appearances of a name are connected, creating intermediate ports as
 needed.
\layout Subsection

typecast
\layout Standard

The type of a signal can be typecasted by appending a function name with
 a 
\family typewriter 
'
\family default 
 to the 
\family typewriter 
::in
\family default 
 and 
\family typewriter 
::out
\family default 
 definitions.
\newline 
Example:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
::name
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
signal_a
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
::type
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
type_a
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
::in
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{24mm}
\end_inset 


\family typewriter 
inst_a/port_a'typefunc
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
::out
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{22mm}
\end_inset 


\family typewriter 
inst_b/port_b'typefunc
\family default 

\newline 

\newline 
The signal 
\family typewriter 
signal_a
\family default 
 will be of type 
\family typewriter 
type_a
\family default 
, while the connecting ports of 
\family typewriter 
inst_a
\family default 
 and 
\family typewriter 
inst_b
\family default 
 are converted by applying the typecast function 
\family typewriter 
typefunc
\family default 
.
\newline 
Caveat: typecast support is experimental.
\newline 

\layout Subsection

Automatic Generation of Toplevel Ports
\layout Standard

If the signal mode as defined in the 
\family typewriter 
::mode
\family default 
 column matches one of I, O or IO, MIX will create top level ports.
 This feature can be disabled by the configuration variable 
\family typewriter 
output.generate.inout
\family default 
.
 Possible values are 
\family typewriter 
mode
\family default 
(enable top level port generation) and 
\family typewriter 
noxfix
\family default 
(do not prefix and postfix generated port names for top level ports), which
 are set by default.
 To exclude some signals from automatic top-level port generation, use 
\family typewriter 
output.generate.xinout sig_foo,sig_bar
\family default 
.
 This feature is usefull if you need to use internal inout signals, but
 do not want to have them wired to the top-level.
\layout Subsection

CONN columns details
\layout Subsection

Special CONN sheet signals
\layout Standard

Special signal names:
\newline 

\family typewriter 
%LOW%, %HIGH%, %LOW_BUS%, %HIGH_BUS%, %OPEN%
\family default 

\newline 

\layout Subsubsection

%OPEN% aka.
 open
\layout Standard

Use the 
\family typewriter 
%OPEN%
\family default 
 signal to leave some pins of module bar port a open MIX has no knowledge
 about ports.
 Everything is defined in terms of signals and instances.
 Use the "
\family typewriter 
open
\family default 
" pseudo signal to define the extra pins.
\newline 

\newline 
E.g.: wire 
\family typewriter 
foo/a
\family default 
 port to 
\family typewriter 
bar/a
\family default 
 port.
 
\family typewriter 
bar/a
\family default 
 has extra pins.
\newline 

\newline 

\family typewriter 
::name signal_a, ::high 7, ::low 0, ::out foo/a ::in bar/asn
\backslash 
newline
\newline 
%OPEN%, ::high 1, ::low 0, ::in -, ::out bar/a(9:8)
\family default 

\newline 

\newline 
XXX write this in spreadsheet XXX
\newline 
You could also force the 
\family typewriter 
::in
\family default 
 pins to high or low, instead, e.g.
 use: 
\newline 

\family typewriter 
%HIGH%
\family default 
, 
\family typewriter 
%HIGH_BUS%
\family default 
, 
\family typewriter 
%LOW%
\family default 
 or 
\family typewriter 
%LOW_BUS%
\family default 
.
 Or a constant.
\layout Subsubsection

Constants
\layout Standard

Constant values can be defined and used in several ways in the CONN worksheet.
 Constants can be marked with a C in the 
\family typewriter 
::mode
\family default 
 column.
 Basically anything resembling a number written in the 
\family typewriter 
::out
\family default 
 column will be considered to be a constant value.
 String and bit vector constants are enclosed in single or double quotes.
 Remember to type two single quotes in excel to start a single quote string.
 Excel takes the first quote character to prevent the following string to
 be interpolated by excel.
\newline 
If you do not name a constant (leave the 
\family typewriter 
::name
\family default 
 field empty), MIX will generate a name like 
\family typewriter 
mix_const_N
\family default 
.
 N starts by one and increments for each new constant value.
\newline 
Constant values can be assigned to instance ports in the 
\family typewriter 
::in
\family default 
 column of that constant.
 
\newline 
Depending on the form of a constant and the output language, MIX tries to
 convert the constant value into something suitable.
 See the constant.xls example (XXXLINK).
\newline 

\begin_inset Graphics
	filename images/mix_table1.jpg
	lyxscale 50
	scale 50
	keepAspectRatio

\end_inset 

 
\newline 
If the target language is VHDL, XXXXX
\newline 
MIX looks like in the following screenshot:
\newline 

\begin_inset Graphics
	filename images/mix_simple_inst.jpg
	lyxscale 40
	scale 40
	keepAspectRatio

\end_inset 


\newline 
 Search for lines with 
\family typewriter 
__E
\family default 
 in the comments to detect constants MIX was not able to translate properly.
 Verilog constant output is not very mature as of today.
\newline 

\layout Subsubsection

Generics and Parameters
\layout Standard

Generics for entities are defined by a 
\series bold 
G
\series default 
 in the 
\family typewriter 
::mode
\family default 
 column.
 The 
\family typewriter 
::name
\family default 
 column defines the generics name.
 If the 
\family typewriter 
::out
\family default 
 column contains a string or a number, the value will be the default of
 this generic.
\newline 
A 
\series bold 
P
\series default 
 in the 
\family typewriter 
::mode
\family default 
 column marks parameters.
 The value given in the 
\family typewriter 
::out
\family default 
 column will be applied to the instances in the 
\family typewriter 
::in
\family default 
 column.
\newline 
If the 
\family typewriter 
::name
\family default 
 column is empty, MIX will assign a generated name.
 The HDL generic name is either the "port" name given in the 
\family typewriter 
::in
\family default 
 column or the 
\family typewriter 
::name
\family default 
.
\newline 
A example description taken from a CONN sheet will create the following
 output in VHDL:
\newline 

\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="2cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="2cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::type
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::mode
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::out
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::in
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

integer 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 G 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 generic_a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 7 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_a 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

integer 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 P 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 parameter_a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 16 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_a 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

string 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 G 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 generic_b 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 "text" 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_b 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

string 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 P 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 parameter_b 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 "text" 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_b  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard


\begin_inset Graphics
	filename images/mix_generic_chip.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 

\layout Subsection

Simple text macros
\layout Standard

Text marked with with a % on both sides is subject to be replaced, if a
 macro or a postfix of that name is defined.
 See the table of predefined macros.
 Additionally the contents of the input table can be referenced like %::column_h
ead%.
 If no suitable text macro is found, the text will be left as is.
\newline 
The text macro replacement does not operate recursively in general.
\newline 

\newline 
Please consider that some text macros are used internally and some have
 a special meaning, too.
 E.g.
 the pseudo signals %OPEN% and %LOW_BUS%.
\layout Subsection

Predefined and user macros
\layout Standard

The following table (XXXwhere is the listXXX) contains a list of predefined
 macros.
 Some of them are defined at run time (e.g.
 the current date), some are for internal purposes only.
 macros marked with a yes in the "User" column can be set freely by the
 user on the command line or in the 
\family typewriter 
mix.cfg
\family default 
 configuration file.
\newline 

\layout Standard

The default values can be changed by using
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
-conf macro.
\backslash 
%THIS_MACRO
\backslash 
%=my_value
\family default 

\newline 
command line switch.
 New macros can be defined the same way.
\newline 
Alternatively a line like
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
MIXCFG macro.
\backslash 
%THIS_MACRO
\backslash 
% my_value
\family default 

\newline 
to the mix.cfg configuration file will achieve the same result.
\layout Standard

Examples:
\layout Standard


\family typewriter 
MIXCFG macro.%VERILOG_DEFINES% `include bar.vh
\layout Subsection

Global configuration parameters
\layout Subsubsection

output.generate.portmapsort
\layout Standard

The output.generate.portmapsort configuation defines the sort order for portmaps
 in instantiations and component declarations.
 You can set any combination of the keys in the following list, seperated
 by whitespace or comma:
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

key
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
alpha
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

strict alphabetical sort order (default)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
input
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sorted as defined in the input sheets
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
inout
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

in
\begin_inset Quotes erd
\end_inset 

 before 
\begin_inset Quotes eld
\end_inset 

inout
\begin_inset Quotes erd
\end_inset 

 before 
\begin_inset Quotes eld
\end_inset 

out
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
outin
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

out
\begin_inset Quotes erd
\end_inset 

 before 
\begin_inset Quotes eld
\end_inset 

inout
\begin_inset Quotes erd
\end_inset 

 before 
\begin_inset Quotes eld
\end_inset 

out
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
genpost
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

print generated port at the end
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
genpre
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

print generated ports at the beginning
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
::COL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

sort alphabetical by using the values defined in the 
\family typewriter 
::COL
\family default 
 column 
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard
\noindent 
The sort criteria are applied from left to right.
 Thus 
\begin_inset Quotes eld
\end_inset 

inout,input
\begin_inset Quotes erd
\end_inset 

 will seperate in/inout/out ports and print them in the order of apperal
 or generation.
\layout Standard
\noindent 
Caveat: ::COL is experimental!
\layout Subsubsection

check.signal: Controlling open port handling and misc.
 signal checks
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0.9in">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

key
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

load
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

run the signal load check and report all signals without an appropriate
 load
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

driver
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

run the signal driver check and report all signals with missing or multipledrive
rs
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

check
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

used internally
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

top_open
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

automatically connect to open, if the signal is not used in it's top level
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 

By default all the keys are set.
 Specify a comma seperated list to modify this.
\layout Subsubsection

check.hdlout: Verify created HDL files with respect to references
\layout Standard

Use the 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
-verifyentity 
\emph on 
PATH
\family default 
\emph default 

\begin_inset Quotes erd
\end_inset 

 option or set 
\family typewriter 
check.hdlout.path
\family default 
 to start verification of the generated HDL files against existing files.
 There are several ways to achieve a match of the MIX generated files with
 the existing files, please change the configuration parameters below accordingl
y.
 Differences are reported in files with the .ediff extension.
 A summary will be printed to the log file and on the screen.
\newline 
Recommended usage: To check the MIX generated leaf modules, create a verificatio
n directory (e.g.
 
\family typewriter 
\shape italic 
my_entities
\family default 
\shape default 
) and link all leaf entities to that directory.
 Apply the following set of parameters:
\newline 
# Adding path for entity verifications:
\newline 

\family typewriter 
MIXCFG check.hdlout.path 
\shape italic 
my_entities
\family default 
\shape default 

\newline 

\family typewriter 
MIXCFG check.hdlout.mode entity,leaf,generated,ignorecase
\newline 

\family default 
Available keys and values for 
\family typewriter 
check.hdlout.KEY
\family default 
 are:
\newline 
'
\family typewriter 
mode
\family default 
' => "entity,leaf,generated,ignorecase", 
\layout Itemize


\family typewriter 
ignorecase|ic
\family default 
 : ignore case of filename
\layout Itemize


\family typewriter 
entity|module|arch[itecture]|conf[iguration]|all
\family default 
 : which objects to check
\layout Itemize


\family typewriter 
generated
\family default 
 : compare generated objects, only (ignores other files in path)
\layout Itemize


\family typewriter 
inpath
\family default 
 : report if there are extra modules found in path 
\layout Itemize


\family typewriter 
leaf
\family default 
 : only for leaf cells 
\layout Itemize


\family typewriter 
nonleaf
\family default 
 : only non-leaf cells
\layout Itemize


\family typewriter 
dcleaf
\family default 
 : dont care if leaf (all modules)
\layout Standard

'
\family typewriter 
path
\family default 
' => "",
\layout Standard

if set to 
\family typewriter 
PATH[:PATH:...]
\family default 
, MIX will check generated entities against entities found there.
 
\newline 
'
\family typewriter 
delta
\family default 
' => '',
\layout Standard

define how the diffs are made, see 
\family typewriter 
output.delta
\family default 
 for allowed keys.
 If it's empty, take 
\family typewriter 
output.delta
\family default 
 contents.
 
\newline 
'
\family typewriter 
filter
\family default 
' => (experimental, do not use)
\newline 
'
\family typewriter 
extmask
\family default 
' => (experimental, do not use)
\layout Section

CONN sheet macros
\layout Standard

To simplify the wiring of standard interfaces, MIX provides the connection
 macro facility.
 The connection macros are entered just like any other connection, but are
 marked by 
\series bold 
MH
\series default 
, 
\series bold 
MD
\series default 
 and 
\series bold 
MX
\series default 
 in the 
\family typewriter 
::gen
\family default 
 column.
 
\series bold 
MH
\series default 
 is the macro header line, which has to be followed by one to many 
\series bold 
MD
\series default 
 macro definition row.
 The first non-comment line without a 
\series bold 
MD
\series default 
 tag stops the macro definition.
\newline 
The tag 
\series bold 
MX
\series default 
 marks lines subject to be macro expanded.
 The macro expansion takes place after the initial tables were parsed.
\newline 
You can define simple, one-letter variabes in the macro cells.
 Any text in 
\family typewriter 
::ign
\family default 
, 
\family typewriter 
::gen
\family default 
, 
\family typewriter 
::comment
\family default 
 and 
\family typewriter 
::descr
\family default 
 cells of a 
\series bold 
MH
\series default 
 and 
\series bold 
MX
\series default 
 row will not be subject to matching and evaluation, but be ignored.
 Apart from that the column names have no special meaning.
\newline 

\newline 
A simple example will illustrate the connection macro usage.
\newline 

\begin_inset Graphics
	filename images/macro.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 
 Here the macro header 
\series bold 
MH
\series default 
 defines the variables $n, $1, $h, $4 and $5.
 The MIX parser extracts the 
\series bold 
MH
\series default 
 row and accompanying 
\series bold 
MD
\series default 
 rows (five lines here) from the table.
 In a second parser run each 
\series bold 
MX
\series default 
 row will trigger a match operation against 
\emph on 
all
\emph default 
 
\series bold 
MH
\series default 
 definitions.
 
\series bold 
MX
\series default 
 and 
\series bold 
MH
\series default 
 are a match, if each cell defined in the 
\series bold 
MH
\series default 
 row has a matching counterpart in the 
\series bold 
MX
\series default 
 row.
 Variables in the 
\series bold 
MH
\series default 
 cells are considered to match any string ( .+ in perl regular expression
 syntax).
 Thus the first 
\series bold 
MX
\series default 
 line matches the 
\series bold 
MH
\series default 
 lines here.
 The variables defined in the 
\series bold 
MH
\series default 
 cells are assigned the matching values from the 
\series bold 
MX
\series default 
 line.
 E.g.
 $n will be 
\emph on 
0
\emph default 
 for the first 
\series bold 
MX
\series default 
, 
\emph on 
1
\emph default 
 for the second.
 The variable $4 is assignd 
\emph on 
ls
\emph default 
, $5 becomes 
\emph on 
min
\emph default 
.
\newline 

\newline 
If 
\series bold 
MX
\series default 
 and 
\series bold 
MH
\series default 
 match, the accompanying 
\series bold 
MD
\series default 
 lines are executed.
 Variables are replaced by their currently assigned value.
 Here the first 
\series bold 
MX
\series default 
 will result in the following table to be generated:
\newline 

\begin_inset Graphics
	filename images/macro_out.jpg
	lyxscale 66
	scale 66

\end_inset 


\newline 
 The 
\family typewriter 
::gen
\family default 
 column is set to 
\series bold 
G_MX
\series default 
 after evaluation.
 Empty cells in 
\series bold 
MD
\series default 
 lines are filled with the value given by 
\series bold 
MX
\series default 
, if any.
\newline 

\newline 
Please see the contrib directory for commonly available connection macros
 (t.b.d.).
\layout Section

Generator statements
\layout Subsection

Hierachy Generator Operators
\layout Standard

Another powerfull feature of MIX are the generator statements.
 The generators are applied after initial tool setup and connection macro
 evaluation, first the hierachy generators, then the connection generators.
\newline 

\newline 
Generators are defined in the ::gen column.
 Basically three types are available:
\newline 

\layout Itemize

Constructor generators: $i(N..M)
\layout Itemize

Match generator: /match_expression/
\layout Itemize

Bounded match generator: $i(N..M),/match_expression/
\layout Standard

match_expression is like perl(1) regular expressions, but with some extensions
 and specials.
\newline 

\layout Subsubsection

Constructor Generator statement
\layout Standard

MIX takes the variable and the range definied in ::gen and evaluates the
 rest of the row for each value in the range.
 Currently only one variable is allowed and the range has to be of form
 (N..M).
\newline 

\newline 
A simple example illustrates the usage:
\newline 

\begin_inset Graphics
	filename images/gen_it.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 will give ten instances from inst_1 to inst_10, each being a submodule
 of inst_a with each having a entity inst_1_e to inst_10_e, dito.
 for the configuration.
 Simple arithmetic can be applied to derive values from the run time parameter
 $i.
\newline 
Constructor's will yield new instances.
 An instance name has to be given in the ::inst column.
\newline 

\layout Subsubsection

Match generator
\layout Standard

For each instance defined up to now, match_expression is evaluated.
 If this yields true, the line is executed.
 Parts of the expression in parantheses are used to set the variables $1,
 $2, ...
 accordingly.
 See the perl regular expression man page perlre(1) for more details.
 This variables can be used in the other cells.
 Simple arithmetic is possible, e.g.
 $i + 1 or $1 * 2.
\newline 
A match generator will yield new instances only if the name in the ::inst
 column is set to a value different from the matching instance.
\newline 

\newline 
Example:
\newline 

\newline 
XXX t.b.d.
\newline 

\layout Subsubsection

Bounded match generator
\layout Standard

By adding a run variable and a range $i(N..M), match generators can be restricted
 to only apply if the variable $i is within the range.
 $i has to be defined in match_expression and will match any number.
\newline 

\newline 
In opposite to the constructor generator, MIX will not evaluate all possible
 values for $i, but only make sure $i stays within the bounds of the range.
\newline 

\newline 
Example:
\newline 

\newline 
XXX t.b.d.
\newline 

\layout Subsubsection

Advanced features of the match generators
\layout Standard

The match expression can contain references to all fields of the to match
 object with the
\newline 
::NAME_OF_COL=string(match):: reference.
\newline 

\newline 
E.g.
 the connection generator
\newline 

\begin_inset Graphics
	filename images/gen_2.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 will wire all instances iom_.* having a property ::pin in the given range
 with a newly defined signal i_N_N+1.
 iom_foo with ::pin = 270 port serial_o will drive the signal i_270_271,
 the instance iom_bar with ::pin = 271 is connected to the signal i_270_271
 to it's port serial_i by the next line.
 for instance iom_foo only the first line matches, thus that module will
 net get a connection to serial_i by these generator lines.
\newline 

\newline 
A trainling :: can be omitted.
 If two propertied are to be matched, this will look like
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

/::prop1=(.*)::::prop2=string(match?)/
\layout Subsubsection

Additional Information
\layout Standard

Match generators work the same way on the CONN sheets.
 By default the match expression will match against all defined instances,
 not connections.
\newline 
To make a match expression iterate over all connection, prefix the whole
 expression by the CONN: keyword.
\newline 

\newline 
Please have a look into the distributed howto.xls and the macro.xls in the
 test case directory t to see more examples.
\layout Section

IO sheet
\layout Standard

A third category of input specification is the IO sheet.
 The contents of the IO sheet is parsed and translated into instances of
 io cell blocks and pad cells and connections of the io logic with the design
 core logic.
\newline 

\begin_inset Graphics
	filename images/mix_iocell.jpg
	lyxscale 70
	scale 70
	keepAspectRatio

\end_inset 


\newline 
 Image 3: IO Cell and Pad Layout
\newline 
The IO sheet is a simple way to specify the connections of the IO cell to
 the design core logic.
 MIX will derive the connections of the DI(0..n), DO(0..n), PU(0..n), PD(0..n),
 EN(0..n) and the accompanying select lines.
 MIX will not add special purpose connections and the IO cell to Pad cell
 connections.
 This should be done by using the macro and generator statements in the
 CONN sheets.
\newline 
A simple example illustrates the various input fields and their usage.
\newline 

\begin_inset Graphics
	filename images/mix_io_sheet.jpg
	lyxscale 40
	scale 40
	keepAspectRatio

\end_inset 


\newline 

\layout Subsection

IO sheet column header
\layout Standard

The IO sheet starts with the usual header line, defining mandatory and optional
 columns:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::ign
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{9mm}
\end_inset 

A 
\family typewriter 

\backslash 
#
\family default 
 marks a comment line.
 Has to be first column.
 Optional.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::class
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

The class name is forwarded to the 
\family typewriter 
::class
\family default 
 field of the CONN sheet.
 (opt.)
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::ispin
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

Set to one it this pad is actually bonded (ignored by MIX).
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::pin
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{8mm}
\end_inset 

Number or name of the pin.
 (ignored by MIX)
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::pad
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{8mm}
\end_inset 

The primary key of the IO sheet.
 Has to an integer value.
 The pad
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{32mm}
\end_inset 

numbers do not have to be consecutive.
 Mandatory column.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::type
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{7mm}
\end_inset 

Defines the entity of the generated pad cell.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::iocell
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{3mm}
\end_inset 

Defines name and entitiy of the generated io cell
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::port
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{7mm}
\end_inset 

Define the io cell port name towards to the core logic.
 Port
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{32mm}
\end_inset 

 names are separated by , and/or <Alt><CR>.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::name
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{8mm}
\end_inset 

pad name
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\family typewriter 
::muxopt
\family default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

Connection matrix of io cell ports to core logic.
 Signals are separated
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 

by , and/or <Alt>-<CR>.
 Signals may be single bits or a one bit bus
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 

slice.
 Type 
\family typewriter 
core_sig.N
\family default 
 or 
\family typewriter 
core_sig(N)
\family default 
 for bit N of the core signale
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 


\family typewriter 
core_sig
\family default 
.
\family typewriter 
::muxopt
\family default 
 is allowed to appear several times.
 The number of
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 

signals and the order matches the port names in the ::port field.
\newline 

\layout Subsection

IO sheet %SEL% rows
\layout Standard

The rows with the key 
\family typewriter 

\backslash 
%SEL
\backslash 
%
\family default 
 in the 
\family typewriter 
::class
\family default 
 field define the wiring of the IO cells multiplexer select lines.
 The name in the 
\family typewriter 
::port
\family default 
 field defined the io cell port to connect to.
 The 
\family typewriter 
::name
\family default 
 field is ignored.
 The signal names listed in the 
\family typewriter 
::muxopt
\family default 
 columns are connected from the designs core with the appropriate slice
 of the io cell multiplexer select lines (one hot select lines).
 The leftmost 
\family typewriter 
::muxopt
\family default 
 connects to bit 0, the next to bit 1 and so forth.
 
\family typewriter 
core_sel.N
\family default 
 or 
\family typewriter 
core_cel(N)
\family default 
.
 can be used to wire select buses.
 The number of non-empty consecutive 
\family typewriter 
::muxopt
\family default 
 fields also define the width of the multiplexer.
 The actual multiplexer width is stored in the 
\family typewriter 

\backslash 
%::_muxwidth_
\backslash 
%
\family default 
 field.
\newline 
The given values for the select lines are valid until the last row or another
 
\family typewriter 

\backslash 
%SEL
\backslash 
%
\family default 
 line is found.
\newline 

\family typewriter 

\backslash 
%NOSEL
\backslash 
%
\family default 
 will stop usage of in/out multiplexer and select lines.
\newline 
Setting the configuration switch "
\family typewriter 
iocell.select
\family default 
" to "
\family typewriter 
bus
\family default 
" changes from a one-hot architecture to a select bus architecture.
 The select bus name is take in the leftmost 
\family typewriter 
::muxopt
\family default 
 column, an appropriate width is calculated by the number of defined 
\family typewriter 
::muxopt
\family default 
 columns.
\newline 

\layout Subsection

IO sheet pad rows
\layout Standard

All other rows make up the connection matrix.
 For each row an io cell is instantiated.
 By default this io cell's name is composed by the type listed in the 
\family typewriter 
::type
\family default 
 field with the 
\family typewriter 
::pad
\family default 
 number attached, separated by a 
\family typewriter 
_
\family default 
.
\newline 
Secondly a pad cell is instantiated.
 By default this pad cell's name is composed from the prefix 
\family typewriter 
pad_
\family default 
 and the pad number as given in the 
\family typewriter 
::pad
\family default 
 field.
 The default naming for both io cell and pad is given by the configuration
 variables
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
pad.name = 
\backslash 
%PREFIX_PAD_GEN
\backslash 
%
\backslash 
%::pad
\backslash 
%
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
iocell.name = 
\backslash 
%::iocell
\backslash 
%_
\backslash 
%::pad
\backslash 
%
\family default 

\newline 
You can leave unused 
\family typewriter 
::muxopt
\family default 
 columns empty.
 Then MIX will reduce the number of select lines accordingly.
\layout Subsection

IO cell and Pad connections
\layout Standard

MIX IO sheet parser connects the IO cell internal interface towards the
 design core logic, only.
 Connections between pad and io cell need to be defined explicitely, usually
 be means of 
\family typewriter 
::gen
\family default 
 match operators.
\newline 
Additonal wires for NAND tree or boundary scan are specified the same way.Signal
 busses need to be defined properly, esp.
 the width and type.
 MIX will derive these properties from the definition.
\newline 
The generated pad and iocells need to be linked into the design hierarchy
 properly, e.g.
 by adding 
\family typewriter 
::gen
\family default 
 match operators in the 
\family typewriter 
HIER
\family default 
 sheet.
\newline 

\begin_inset Graphics
	filename images/mix_hier_sheet.jpg
	lyxscale 75
	scale 40
	keepAspectRatio

\end_inset 


\newline 

\begin_inset Graphics
	filename images/mix_conn_sheet.jpg
	lyxscale 75
	scale 45
	keepAspectRatio

\end_inset 


\layout Subsection

IO Parser global configuration
\layout Standard

Some global configuration are available to tailor the IO sheet parser behaviour:
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="9cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Rule determines naming of the io cell instances.
 Default "
\family typewriter 

\backslash 
%::iocell_
\backslash 
%::pad
\backslash 
%
\family default 
" 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.auto
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 If set to "
\family typewriter 
bus
\family default 
", create busses as needed.
 Otherwise MIX relies on appropriate definition of busses by the CONN sheets.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.bus
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 If 
\family typewriter 
iocell.auto
\family default 
 is set to bus, MIX will attach the keyword listed here (
\family typewriter 
_vector
\family default 
) to signal type definitions.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.defaultdir
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Defines default iocell port direction.
 Default: 
\family typewriter 
in
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.in
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 comma and/or white-space separated list of in ports Default: 
\family typewriter 
do, en, pu, pd, xout
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.out
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 list of io-cells out ports Default: 
\family typewriter 
di, xin
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
iocell.select
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 List of keywords defining the select multiplexer connections: 
\family typewriter 
onehot
\family default 
 -
\begin_inset Formula $>$
\end_inset 

 use one hot architecture for select lines, 
\family typewriter 
bus
\family default 
 -
\begin_inset Formula $>$
\end_inset 

 use select line bus, 
\family typewriter 
auto
\family default 
 -
\begin_inset Formula $>$
\end_inset 

 calculate width of select bus or one-hot based on 
\family typewriter 

\backslash 
%SEL
\backslash 
%
\family default 
 width; Default: 
\family typewriter 
onehot,auto
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
pad.name
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Rule determines the naming of the pad instances.
 Default: "
\family typewriter 

\backslash 
%PREFIX_PAD_GEN
\backslash 
%
\backslash 
%::pad
\backslash 
%
\family default 
"  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Section

I
\begin_inset Formula $^{2}$
\end_inset 

C sheet
\layout Standard

The I
\begin_inset Formula $^{2}$
\end_inset 

C sheet is one more category of input specification.
 It's content describes connections from other modules to I
\begin_inset Formula $^{2}$
\end_inset 

C registerblocks.
 The hierarchical position of a registerblock can be defined in the 
\family typewriter 
HIER
\family default 
-sheet.
\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C Registerblock
\layout Standard

The I
\begin_inset Formula $^{2}$
\end_inset 

C module is split into two seperate untis called I
\begin_inset Formula $^{2}$
\end_inset 

C-kernel and I
\begin_inset Formula $^{2}$
\end_inset 

C-registerblock.
 Settings made in a MIX-I
\begin_inset Formula $^{2}$
\end_inset 

C-sheet only describe registerblock specific Informations.
 Here you can see a serial I
\begin_inset Formula $^{2}$
\end_inset 

C-registerblock.
\newline 

\begin_inset Graphics
	filename images/serial_iic_reg.png
	lyxscale 40
	scale 40
	keepAspectRatio

\end_inset 


\newline 
A I
\begin_inset Formula $^{2}$
\end_inset 

C-registerblock consists of a transceiver, one or more synchronisation blocks
 and some registers (max.
 255).
 The registers direction, synchronisation, in-/out-connections...
 can be specified in the I
\begin_inset Formula $^{2}$
\end_inset 

C sheet.
 The 
\family typewriter 
or_block
\family default 
 is a simple script generated block which connects incoming signals to a
 
\family typewriter 
or
\family default 
 and outgoing ones to the transceiver.
 This work has to be done by a MIX external script, because MIX is not thought
 for generating logics.
\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C sheet column header
\layout Standard

The following section describes the meanings of identifiers used in a MIX
 I
\begin_inset Formula $^{2}$
\end_inset 

C sheet.
 Default settings and mendatory/optional specification can be found in the
 table bellow.
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="18" columns="2">
<features>
<column alignment="left" valignment="top" width="0pt">
<column alignment="block" valignment="top" width="14cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::ign
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 every columns row, containing # or // is ignored by MIX
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::variants
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 select a line depending on the -variant command line switch.
 If -variant VAR is set, only lines whose 
\family typewriter 
::variant
\family default 
 cell contains the keyword VAR, default or empty, are selected and read
 in.
 several variants may be given in one cell, separated by ",".
 Without specifying the -variant switch, the "default" and empty 
\family typewriter 
::variant
\family default 
 cells are read in and evaluated.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::ign
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 ignore this row if # is detected.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::variants
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 select a variant.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::type
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 register type; only serial registers implemented yet.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::dev
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 specify the device name
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::sub
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 define registerblock subaddress
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::interface
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 domain name
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::block
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 registerblock Name.
 The registerblock name and its sub-address are building the instance-name.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::dir
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 defines a registers input/output direction, possible values are: 
\family typewriter 
R
\family default 
, 
\family typewriter 
W
\family default 
 or 
\family typewriter 
RW
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::spec
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 update signal
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::clock
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 set a clock domain.
 Every I
\begin_inset Formula $^{2}$
\end_inset 

C register may receive it's own clock.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::reset
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 specify a Reset signal.
 This signal resets the I
\begin_inset Formula $^{2}$
\end_inset 

C registers.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::busy
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 busy signal
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::b
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 specifies a signal which is connected to a registers pin.
 This is a multiple column which can be used to set different signals to
 the same register
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::init
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 Set initializing value of register connection(s).
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::rec
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 Set recommended value of a register connection(s).
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
::comment
\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 all entries in these cells are threaten as comments.
 MIX will keep comments to put them later into VHDL/Verilog output.
\newline 

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="17" columns="5">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="15mm">
<column alignment="block" valignment="top" rightline="true" width="25mm">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Column name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Descriptionend
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Default value
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Req.
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Example
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::ign 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Ignore line 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 # comm.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::variants 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Variant selector 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Default 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Var1 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::type 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Register type 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 serial 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 serial 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::dev 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Device name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 n/a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 FRCA0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::sub 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Sub address 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 VHDL 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 27 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::interface 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Domain name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_CONFIG 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 cc0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::block 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Block Name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 mc 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::dir 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Direction 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 RW 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::spec 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Update Signal 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 NTO 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 takeover_b72 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::clock 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Clock Domain 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 clkcc81 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::reset 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Reset Signal 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 asresc_n 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::busy 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Busy Signal 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 b81 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::b 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Bit n 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 FMSYN.2 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::init 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Reset Value 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::rec 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Recommended Value 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::comment 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Comment field 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 This is a comment  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C Parser global configuration
\layout Standard

Also here some global configuration are available to tailor the I
\begin_inset Formula $^{2}$
\end_inset 

C sheet parser behaviour:
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="9cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
i2c_cell.type
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 specifies the default register type (default: 
\family typewriter 
ser
\family default 
) 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
i2c_cell.
\backslash 
%IIC_SER_REG
\backslash 
%
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 set prefix for serial subregister entity (default: 
\family typewriter 
iic_ser_reg_
\family default 
)
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
i2c_cell.
\backslash 
%IIC_PAR_REG
\backslash 
%
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 set prefix for parallel subregister entity (default: 
\family typewriter 
iic_par_reg_
\family default 
) 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
i2c_cell.
\backslash 
%IIC_SYNC
\backslash 
%
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 set prefix for sync-block (default: 
\family typewriter 
sync_iic
\family default 
)  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C Sheet example
\layout Standard

In this section a example will demostrate I
\begin_inset Formula $^{2}$
\end_inset 

C sheet usage, by connecting the 
\family typewriter 
a_clk
\family default 
 example to a registerblock.
 
\begin_inset Formula $<$
\end_inset 

t.b.d
\begin_inset Formula $>$
\end_inset 


\layout Section

VI2C sheet
\layout Section

Alarm clock example
\layout Section

Alarm clock example
\layout Section

MIX converter man page
\layout Subsection

Synopsis
\layout Subsection

Command line switches
\layout Standard


\family typewriter 
-out OUTPUTFILE.ext
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

defines output filename and type
\newline 

\family typewriter 
-outenty OUT-e.vhd|ENTY|COMB
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Write all entities into OUT-e.vhd.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

If argument is ENTY, each entity will be written
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

into a file called entityname-e.vhd..
 (The exact
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

naming depends on changeable rules).
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

If argument is COMB, entity, architecture and configuration
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

will all be written into one file called entityname.vhd
\newline 

\family typewriter 
-outarch OUT-rtl-a.vhd|ARCH|COMB
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

See description of outenty option.
\newline 

\family typewriter 
-outconf OUT-c.vhd|CONF|COMB
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

See description of outenty option.
\newline 

\family typewriter 
-combine
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

write entity, architecture and configuration into one file for 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

each entity.
 Shortcut for setting -out[enty|arch|conf] to COMB
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

individually.
\newline 

\family typewriter 
-dir DIRECTORY
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

write intermediate, internal and backend data into the given
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

DIRECTORY.
 By default MIX writes to the current working directory
\newline 

\family typewriter 
-top TOPCELL
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

use TOPCELL as top.
 Default is TESTBENCH or daughter of TESTBENCH.
\newline 

\family typewriter 
-adump
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

dump internal data in ASCII format, too
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

(debugging, use with small data set).
\newline 

\family typewriter 
-variant VAR1
\family default 

\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
hspace*{15mm}
\end_inset 

Select VAR1 from the HIER worksheet.
\newline 

\family typewriter 
-conf key.key.key=value
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Overload $EHkeykeykey with value or add a
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

new configuration variable.
\newline 

\family typewriter 
-listconf
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Print out all available/predefined configurations options
\newline 

\family typewriter 
-delta
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Output will be compared against previous runs.
\newline 

\family typewriter 
-sheet SHEET=MATCH
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

SHEET can be one of "hier", "conn", "vi2c".
 MATCH is
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

a perl regular expression.
\newline 

\family typewriter 
-strip
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Remove old and diff sheets.
 These sheets are named with "O_" or "DIFF".
\newline 

\newline 
# Add your options here ....
\newline 

\newline 

\newline 
"Standard" options:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 


\family typewriter 
my @stdopts = qw(help|h! verbose|v! quiet|q! nobanner! debug:i
\family default 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\family typewriter 
makeopts=s@ gmakeopts=s@);
\family default 

\newline 
Caveat: the -h option will not work on MS-Windows
\layout Subsection

Runtime options and configuration
\layout Standard

Runtime configuration is controlled by (increasing precedence): 
\layout Itemize

built-in default values 
\layout Itemize


\family typewriter 
mix.cfg
\family default 
 files, if found in
\family typewriter 
 $HOME
\family default 
, 
\family typewriter 
$PROJECT
\family default 
 and/or in the current directory.
 Format is: 
\family typewriter 
MIXCFG 
\emph on 
name.of.conf
\emph default 
 
\emph on 
value
\layout Itemize

CONF sheet found in input xls files 
\layout Itemize

command line switch: 
\family typewriter 
-conf name.of.conf=value
\layout Itemize

dedicated command line options 
\layout Standard

MIX reads in
\family typewriter 
 mix.cfg
\family default 
 configuration files in the following locations: 
\layout Enumerate


\family typewriter 
$ENV{HOME}
\family default 
, 
\family typewriter 
$ENV{HOMEDRIVE}
\family default 
, 
\family typewriter 
$ENV{HOMEPATH}
\family default 
, 
\family typewriter 
$ENV{USERPROFILE}
\family default 
 or 
\family typewriter 
C:
\backslash 

\family default 

\newline 
(only from the first matching location)
\newline 

\layout Enumerate


\family typewriter 
$ENV{$PROJECT}
\layout Enumerate

"
\family typewriter 
.
\family default 

\begin_inset Quotes erd
\end_inset 

 (
\family typewriter 
cwd()
\family default 
)
\layout Subsection

Misc features
\layout Subsubsection

-delta mode
\layout Standard

In delta mode, MIX does not change output files, but reports the number
 of changes in the output files compared to a previous run.
 Extra sheets 
\family typewriter 
DIFF_CONN
\family default 
 and 
\family typewriter 
DIFF_HIER
\family default 
 (and old versions of them) are added to the intermediate output file.
 The 
\family typewriter 
FOO.pld
\family default 
 internal output gets overwritten, though (if created).
 Messages are appended to 
\family typewriter 
mix_0.pl.out
\family default 

\newline 
If a new HDL-file needs to be created by the changes, 
\family typewriter 
-delta
\family default 
 mode is not be applied for that file, but it is generated as a new file.
 If you never have written a 
\family typewriter 
FOO-mixed.xls
\family default 
 intermediate output, no 
\family typewriter 
HIER
\family default 
 or 
\family typewriter 
CONN
\family default 
 sheets are generated.
\newline 
By adding the following two lines to your configuration (e.g.
 
\family typewriter 
./mix.cfg
\family default 
), delta mode will be the default:
\newline 

\newline 

\family typewriter 
MIXCFG output.generate.delta 1
\family default 

\newline 

\family typewriter 
MIXCFG output.delta sort,remove
\family default 

\newline 

\newline 
See the configuration option description for more details.
\newline 

\newline 

\family typewriter 
-nodelta
\family default 
 switches delta mode off.
\newline 

\newline 
Possible values for output.delta are (comma seperated list): 
\layout Itemize


\family typewriter 
space
\family default 
: do not consider whitespace
\layout Itemize


\family typewriter 
sort
\family default 
: sort lines before compare (default)
\layout Itemize


\family typewriter 
comment
\family default 
: do not remove all comments before compare
\layout Itemize


\family typewriter 
remove
\family default 
: remove empyt diff files
\layout Itemize


\family typewriter 
ignorecase|ic
\family default 
: ignore case if set
\layout Subsubsection

Intermediate Excel Sheet
\layout Standard

Format of intermediate xls sheet will be kept as is as long as the number
 and order of columns is unchanged.
\newline 
MIX saves three old versions of the generated 
\series bold 
HIER 
\series default 
and 
\series bold 
CONN 
\series default 
sheets.
 The worksheets names are rotated by a trailing _ and number, e.g 
\series bold 
HIER_0
\series default 
, 
\series bold 
HIER_1
\series default 
, ....
\layout Subsubsection

Output Redirection
\layout Standard

MIX writes all output into the current working directory.
 By using the
\newline 

\family typewriter 
-dir DIRECTORY
\family default 

\newline 
option, you can set the output directory for all intermediate, internal
 and HDL files to 
\family typewriter 
DIRECTORY
\family default 
.
 Absolute path names defined by other options (e.g.
 -out) are not changed, though.
 If 
\family typewriter 
DIRECTORY
\family default 
 does not exist, it will be created.
 To have separate output directories, use the 
\family typewriter 
mix.cfg
\family default 
 file:
\newline 

\family typewriter 
MIXCFG output.path HDLDIRS
\family default 

\newline 

\family typewriter 
MIXCFG internal.path MIXINTERNAL
\family default 

\newline 

\family typewriter 
MIXCFG intermediate MIXINTERMEDIATE
\family default 

\newline 
writes internal, intermediate and HDL files to the given pathes.
 All directories have to exist and will not be created.
\layout Section

Alarm clock example
\layout Subsection

Core logic
\layout Subsection

IO logic
\layout Section

Other examples
\layout Section

Helper Tools
\layout Subsection

Converting between MS-Win and UNIX
\layout Standard

Some EDA tools react stange, if they detect MS-Win style end-of-line.
 To convert to UNIX end-of-lines use:
\layout Standard


\family typewriter 
$ module load freeware; recode 
\begin_inset Quotes eld
\end_inset 

pc..lat1
\begin_inset Quotes erd
\end_inset 

 *.vhd
\family default 

\newline 
or (in MIX's Base directory):
\newline 

\family typewriter 
$ dos2unix.pl <filename>
\family default 

\newline 
for Dos to Unix conversion and
\newline 

\family typewriter 
$ unix2dos.pl <filename>
\family default 

\newline 
for Unix to Dos conversion.
\layout Subsection

Convert ExCEL to SXC and CVS
\layout Standard
\noindent 
MIX comes with a command line Excel to CSV converter tool:
\layout Standard
\noindent 
Usage for UNIX is like:
\layout Standard
\noindent 

\family typewriter 
$ module load perl mix
\layout Standard
\noindent 

\family typewriter 
$ xls2csv -csv foo[.xls] bar[.xls] [bar2.xls ...]
\layout Standard
\noindent 
This will convert all sheets in foo.xls to foo.csv, bar.xls to bar.csv and so
 on.
 As cvs only has one sheet, the different input sheets will be seperated
 by ":=:=:=>" followed by the ExCEL sheet name.
 Even the first sheet will be marked by such a line.
\layout Standard
\noindent 
xls2csv.pl options:
\layout List
\labelwidthstring 00.00.0000
\noindent 

\family typewriter 
-csv
\family default 
 create csv formatted output
\layout List
\labelwidthstring 00.00.0000
\noindent 

\family typewriter 
-sxc
\family default 
 create OpenOffice (sxc) formatted output.
 By default both formate will be created.
\layout List
\labelwidthstring 00.00.0000
\noindent 

\family typewriter 
-sep\SpecialChar ~
X
\family default 
 take 
\family typewriter 
X
\family default 
 as field delimiter.
 Default is 
\begin_inset Quotes eld
\end_inset 


\family typewriter 
;
\family default 

\begin_inset Quotes erd
\end_inset 

.
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
-[no]head
\family default 
 do [not] seperate sheets with a special marker line (=:=:=:> SHEETNAME).
 On by default.
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
-noquote
\family default 
 do not quote the csv cells.
 Quotes are on by default.
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
-quote\SpecialChar ~
X
\family default 
 use 
\family typewriter 
X
\family default 
 as quoting character.
 Default are double-quotes (
\begin_inset Quotes eld
\end_inset 

).
\layout List
\labelwidthstring 00.00.0000


\family typewriter 
-sheet\SpecialChar ~
RE
\family default 
 select only sheets which names match the regular expression 
\family typewriter 
RE.
\layout Standard
\noindent 
Please remove the created files before updating.
\layout Standard
\noindent 
For MS-Win workstations, use
\layout Standard
\noindent 

\family typewriter 
K:
\backslash 
Projects
\backslash 
MIX
\backslash 
PROG
\backslash 
xls2csv.pl
\family default 
 ....
\layout Standard
\noindent 
Options and syntax are the same as with UNIX/Linux.
\layout Section

Known Bugs and limitations
\layout Section

Issue tracking: CADNET - Issue tracking - CAD Software - MIX
\layout Standard

If you find unexpected or buggy behavior, please issue a trouble ticket.
 Don't forget to add a short description.
 The test case should contain all source files and also log files, the exact
 command line switches and configuration files applied.
\newline 

\emph on 
Please provide a comprehensive description of issues found including all
 required input data and command line switch to allow fast debugging and
 fixing.
\layout Section

Links
\layout Subsection

MIX paper and documentation
\layout Standard


\emph on 
EDP_2003_final_030331.pdf
\emph default 

\newline 

\emph on 
MIX_Specification.xls
\emph default 
 (see 
\backslash 

\backslash 
Galaxy
\backslash 
Development
\backslash 
PROJECTS
\backslash 
MIX
\backslash 
MIX_Intro.ppt)
\layout Subsection

Micronas internal
\layout Standard


\emph on 
Micronas HDL coding guidelines.pdf
\layout Subsection

Others
\layout Subsection

Resources
\layout Standard

Downloads for:
\newline 
- IO Examples
\newline 
- Standard bus examples
\newline 
- NAND Tree
\newline 
- BS example
\newline 
- miscellaneous useful macros
\newline 

\emph on 
wig: this section needs to be done!
\layout Subsection

Used Software
\layout Standard

- Perl (from www.activestate.com) 
\newline 
- Vim 
\newline 
- WinCVS
\layout Subsection

Release Notes
\layout Subsubsection

20030716
\layout Standard

see doc
\backslash 
release_20030716.txt
\layout Subsubsection

20030709
\layout Standard

see doc
\backslash 
release_20030709.txt
\layout Subsubsection

20030605
\layout Standard

See doc
\backslash 
release_20030605.txt
\the_end
