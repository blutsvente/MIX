#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\setlength{\textwidth}{170mm}
\setlength{\textheight}{255mm}
\setlength{\oddsidemargin}{-5mm}
\setlength{\topmargin}{-18mm}

\usepackage{supertabular}
\usepackage{graphicx}
\usepackage{xr}

%\fontencoding{T1}
%\fontfamily{ptm}
%\fontseries{cmr}
%\fontshape{it}
%\fontsize{12}{15}
%\selectfont
\usefont{T1}{phv}{m}{n}
\selectfont

%\usepackage{aaai}
%\usepackage{times}

\title{MIX - Micronas Interconnect Specification Expander}
\author{Userreference}
\date{6.10.2003}
\end_preamble
\language english
\inputencoding latin1
\fontscheme times
\graphics default
\paperfontsize 12
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Section

MIX - Micronas Interconnect Spec expander
\layout Standard

Author: Wilfried Gänsheimer
\newline 
Date: Version: $Id: MIX_Userreference.lyx,v 1.3 2004/11/10 12:21:34 wig Exp $
\layout Section

Introduction
\layout Section

Management Summary
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Installation
\layout Standard

The MIX toolset uses the Perl scripting language.
 Please install a recent version of Perl on your MS-Windows workstation,
 e.g.
 the freely available ActiveState Perl from 
\family typewriter 
K:
\backslash 
PROJECTS
\backslash 
MIX
\backslash 
PROG
\backslash 
ActivePerl-5.6.1.633-MSWin32-x86.msi
\family default 
.
 For UNIX and Solaris no installation is needed.
\newline 
Start MIX from the network drive like described in the examples below.
 That will also make sure, that you are using the most recent release automatica
lly.
 After the Perl installation, you can run MIX.
 immediately.
 Open a command shell on your desktop workstation:
\newline 
Press 
\family typewriter 
Start -> Run
\family default 
 ; type 
\family typewriter 
cmd
\family default 

\newline 
Now change to your working directory and start the generator lije
\newline 

\family typewriter 
K:
\backslash 
Projects
\backslash 
MIX
\backslash 
PROG
\backslash 
mix_0.pl foo.xls
\family default 

\newline 
Caveat: Currently MIX is available on MS-Windows, only!
\layout Standard


\family typewriter 
TODO: Describe MUI (MIX graphical User Interface).
\layout Section

Getting Started
\layout Standard

To receive useful results, MIX reads in various input spreadsheet data.
 At least you will need to prepare a description of your design hierarchy
 (
\series bold 
HIER
\series default 
) and the connectivity sheet (
\series bold 
CONN
\series default 
).
 Optionally MIX will convert a input/output sheet 
\series bold 
IO
\series default 
, listing input/output pads and iocells and how these are linked to the
 core logic into appropriate hierarchy and connection lists.
\layout Subsection

A simple example
\layout Standard

To understand the usage of the various tables and options, a very simple
 example is shown and extended step by step.
 The simple example just has two components 
\emph on 
a
\emph default 
 and 
\emph on 
b
\emph default 
, which are connected by the signal 
\emph on 
sigfoo
\emph default 
.
 The two instances have a common parent 
\emph on 
chip
\emph default 
.
\newline 

\begin_inset Graphics
	filename images/mix_simple_0.jpg
	lyxscale 90
	scale 90
	keepAspectRatio

\end_inset 


\newline 
 Image 1: mix_simple.xls
\newline 

\newline 
The equivalent description of this simple design in MIX is made up from
 a worksheet 
\series bold 
HIER
\series default 
.
\newline 

\begin_inset Graphics
	filename images/mix_simple_1.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 The first row defines the table headers names.
 The names have to be in the form "::NAME".
 Several of the columns are required, some are optional and you can define
 additional columns on your own.
 For HIER sheets the "::inst" column is the primary key.
 One design element will be generated for each new name of an ::inst row.
 If a name is defined several times, these lines will be overloaded or summarize
d, depending on built-in rules of the MIX converter.
\newline 
The "::ign" column has to come first.
 If it starts with a #, the rest of this row will be ignored.
 All other columns can be added in arbitrary order.
\newline 

\newline 
The second required worksheet is 
\series bold 
CONN
\series default 
:
\newline 

\begin_inset Graphics
	filename images/mix_simple_2.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 As you see, this worksheet also starts with the table header definition
 line.
 The primary field is the "::name" column.
 The "::in" and "::out" columns are used to define the drivers and loads
 for the signals.
\layout Subsection

Mix it!
\layout Standard

Run the MIX converter tool in the directory the excel spread sheet is stored
 in:
\newline 
MS-Windows:
\layout Standard


\family typewriter 
$ K:
\backslash 
Projects
\backslash 
MIX
\backslash 
PROG
\backslash 
mix_0.pl foo.xls
\family default 

\newline 
UNIX:
\layout Standard


\family typewriter 
$ module load mix
\layout Standard


\family typewriter 
$ mix foo.xls
\family default 

\newline 
This reads in the design description and evaluates the various sheets.
 It creates output files with an intermediate excel design description (
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix
\backslash 
_simple-mixed.xls
\backslash 
end{tt}
\end_inset 

) and the same data in a internal format (
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}mix
\backslash 
_simple.pld
\backslash 
end{tt}
\end_inset 

).
 A log file (
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix
\backslash 
_0.pl.log
\backslash 
end{tt}
\end_inset 

) and the HDL output files are written in the same run.
 Image 2 shows a screenshot of the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix
\backslash 
_simpe.xls
\backslash 
end{tt}
\end_inset 

 conversion.
 Only the most important errors and warnings are written to the screen,
 while a lot of information will be written to the log file.
 Search for the keywords "ERROR" and "WARNING" to verify proper conversion.
\newline 

\newline 

\begin_inset Graphics
	filename images/mix_simple_cmd.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 
 Image 2: mix_simple conversion
\newline 
All output files are stored in the current working directory.
 Old versions of the output files are overwritten.
 Except the log file that is appended by each converter run.
 The intermediate excel description file keeps a history of previous HIER
 and CONN sheets by rotating _N extended worksheet names.
\newline 

\newline 

\begin_inset Graphics
	filename images/mix_files.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 

\layout Subsubsection

You get what you typed
\layout Standard

MIX generates various HDL files defined by the input data.
 If you select VHDL (also the default language) as output description for
 a hierarchy element, each element results in an appropriate entity, architectur
e and configuration description.
 By default MIX writes one file for all entities, one for all architecture
 and one for all configuration descriptions.
 Those file names are derived from the last excel input file name by stripping
 of the .xls extension and attaching a -e.vhd, -a.vhd and -c.vhd.
\newline 
Here the working directory of the simple example contains a file mix.cfg,
 which is the convenient storage for MIX run-time configuration options.
 The lines "MIXCFG outarch ARCH", "MIXCFG outenty ENTY", and "MIXCFG outconf
 CONF" switch MIX outputs to separate files for each entity, architecture
 and configuration.
 In this case the file names are defined by the element name: 
\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="5cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}Type
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}Basename
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}Extension
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}Example
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Entity 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 ::entity-column 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 -e.vhd 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip_e-e.vhd 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Architecture 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 ::entity-column 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 -rtl-a.vhd 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip_e-rtl-a.vhd 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Configuration 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 ::entity-column 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 -c.vhd 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip_e-rtl-conf-c.vhd 
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Caption


\begin_inset Quotes eld
\end_inset 

_
\begin_inset Quotes erd
\end_inset 

 in the filenames extension are converted to 
\begin_inset Quotes eld
\end_inset 

-
\begin_inset Quotes erd
\end_inset 


\end_inset 


\layout Standard

By default MIX does not write output data for leaf blocks (instances which
 are not parent for other instances).
 Adding a line like "MIXCFG generate.output.arch leaf" into the mix.cfg file
 changes that.
\newline 
The generated output files contain head, body and footer sections.
 See the screenshots of the file a-e-e.vhd and chip-e-rtl-a.vhd for examples
 of an entity and an architecture definition.
\newline 

\begin_inset Graphics
	filename images/mix_a-e-e.jpg
	lyxscale 55
	scale 55
	keepAspectRatio

\end_inset 


\newline 

\begin_inset Graphics
	filename images/mix_chip-e-rtl-a.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 

\layout Section

Details
\layout Subsection

Initialization with -init
\layout Standard

You can use the -init command line option to create the needed files:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
$ mix
\backslash 
_0.pl -init foo.vhd bar.xls
\backslash 
end{tt}
\end_inset 


\newline 
will create the file 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bar.xls
\backslash 
end{tt}
\end_inset 

, which has the following three worksheet categories:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

- empty HIER, CONN and IO sheets
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

- template sheets with numerous examples TMPL_(HIER|CONN|IO)
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

- import sheets IMP_HIER and IMP_CONN (only of more *.vhd or 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{11mm}
\end_inset 

 *.v files are given as command line arguments).
\newline 
You will also get a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix.cfg
\backslash 
end{tt}
\end_inset 

 file.
 If 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bar.xls
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix.cfg
\backslash 
end{tt}
\end_inset 

 already exists, the command will exit without changes.
 The import of 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}*.vhd
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}*.v
\backslash 
end{tt}
\end_inset 

 files is experimental and meant to give a way of getting a start description
 of your design.
 In case of VHDL files, only entity descriptions are imported.
 Take care of getting signal names and instance names properly.
\layout Subsection

Common worksheet properties
\layout Standard

All worksheets parsed by MIX share some common properties.
 There needs to be a header line consisting only of keywords with leading
 double colon.
 All data before the header line is ignored.
 Only the first header line will be evaluated.
 Data in columns with no header or malformed headers will be ignored.
\newline 
Commonly understood table headings are 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}::ign
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::comment
\backslash 
end{tt}
\end_inset 

.
 The 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::ign
\backslash 
end{tt}
\end_inset 

 column is special, because it needs to be the first column of a sheet.
 If a cell in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::ign
\backslash 
end{tt}
\end_inset 

 column starts with a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
#
\backslash 
end{tt}
\end_inset 

 or a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}//
\backslash 
end{tt}
\end_inset 

, the complete row is ignored.The 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::comment
\backslash 
end{tt}
\end_inset 

 column can contain user or program generated comments for a given row.
 It's data will be appended to it's contents as it appears.
\newline 
MIX reads the cell values.
 This is, for Excel and Star(/Open)-Office, what you see , not the real
 contents of the cells.
 Thus all formulas can be used to define the cell values (note: csv is not
 able to do that).
\newline 
A lot of predefined text macros are understood and converted by MIX.
 A text macro is made up by a name surrounded by 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%
\backslash 
end{tt}
\end_inset 

 signs.
 Retrieve a complete list of macros with the -listconf command line switch
 and grep all lines starting with "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}MIXCFG macro
\backslash 
end{tt}
\end_inset 

".
 The table 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%macro
\backslash 
%
\backslash 
end{tt}
\end_inset 

 gives a list of predefined macros, their default settings and wether this
 macro can be used by the user.
 You can use text macros inside of any cell.
\newline 

\begin_inset Graphics
	filename images/mix_table0.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 
 A second type of macros are available to reference other columns of a like
 through 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%::NAME
\backslash 
%
\backslash 
end{tt}
\end_inset 

.
 This will be replaced by the contents of the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::NAME
\backslash 
end{tt}
\end_inset 

 column of this row.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::NAME
\backslash 
end{tt}
\end_inset 

 has to be defined for the current worksheet, obviously.
 In the above example 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%::inst
\backslash 
%
\backslash 
_e
\backslash 
end{tt}
\end_inset 

 will evaluate to 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}chip
\backslash 
_e
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}a
\backslash 
_e
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}b
\backslash 
_e
\backslash 
end{tt}
\end_inset 

 accordingly.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%LANGUAGE
\backslash 
%
\backslash 
end{tt}
\end_inset 

 becomes vhdl.
 Macro expansion happens just before the intermediate design data is written
 out, after evaluation of all input data.
 Recursive macro expansion is not implemented.
 Macros in primary keys like signal and instance names are evaluated at
 signal or instance creation time.
\layout Subsection

Special Spreadsheet-format properties
\layout Standard

MIX is able to read three different table formats: csv(Comma-Seperated-Values),
 sxc(Star-Office-Spreadsheet) and xls(Excel-Spreadsheet).
 While Excel and StarOffice Spreadsheets are full featured, the csv Format
 does not understand formulas.
 This is because the real content and it's values are same in csv.
 The only colored output can(at this moment) be achieved by writing Excel-Spread
sheets(for this an already installed Excel is needed).
 While writing Excel-sheets implies Windows, reading input can be done on
 every Platform(if it got a Perl port).
 Trying to read a Excel-Sheet on non-Windows grounds will cause MIX to produce
 csv per default.
 The output format can be forced by setting 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}format.out
\backslash 
end{tt}
\end_inset 

 to 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}csv
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}sxc
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}xls
\backslash 
end{tt}
\end_inset 

.
 In this case MIX will read the given input file and produce the forced
 output format.
\layout Subsection

HIER sheet properties
\layout Standard

The hierarchy of a design is defined in the HIER sheet.
 By default the HIER sheet is named HIER, but you can set the configuration
 value 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}hier.xls
\backslash 
end{bf}
\end_inset 

 to a Perl regular expression.
 MIX will then consider all worksheets which names match the perl regular
 expression, to be HIER definitions.
 In that case you are free to use different header definitions on different
 sheets.
\newline 
The HIER sheets require at least the columns marked man.
 (mandatory) in the following table.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="12" columns="5">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="15mm">
<column alignment="block" valignment="top" rightline="true" width="2cm">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}Column name
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Open

\layout Standard
 
\backslash 
begin{bf}Description
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Default value
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Req.
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Example
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::ign 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Ignore line 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 # comm.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::gen 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Generator and match 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 see below 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::variants 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Variant selector 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Default 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Var1
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::parent 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Instance name of this instances parent cell 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_PARENT 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 chip 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::inst 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Instance name, primary key! 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 n/a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 a_i1
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::lang 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Language definition 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 VHDL 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 vhdl 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::entity 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Entity name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_ENTITY 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 a 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::config 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Configuration name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_CONFIG 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 a_rtl_conf 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::shortname 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Short name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 text 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::use 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Additional, project specific libraries for VHDL modules.
 includes and defines for Verilog.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 padlib.foo 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::comment 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Comment field 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 text  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard

Internally the kewords 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::debug
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::hierarchy
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::skip
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::default
\backslash 
end{tt}
\end_inset 

 are used.
 Please do not use them.
 Apart from that you are free to add columns of your own.
 User defined columns are usable in 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%::NAME
\backslash 
%
\backslash 
end{tt}
\end_inset 

 macro expansion and are listed in the intermediate design data output.
\newline 
Only the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::inst
\backslash 
end{tt}
\end_inset 

 column has to contain a value in each row (which could be a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%::NAME
\backslash 
%
\backslash 
end{tt}
\end_inset 

 macro, though).
 All other columns will receive more or less reasonable default values in
 case they are left empty.
\layout Subsection

HIER columns details
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::gen
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{12mm}
\end_inset 

If a cell here is not empty, the line will be considered as
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

 generator.
 See description of generator statements below.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::variants
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{6mm}
\end_inset 

Select a line depending on the -variant command line switch.
 If 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

-variant VAR is set, only lines whose 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::variant
\backslash 
end{tt}
\end_inset 

 cell contains the keyword 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

VAR, Default or empty, are selected and read in.
 Several variants may be 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

given in one cell, separated by ",".
 Without specifying the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-variant
\backslash 
end{tt}
\end_inset 

 switch, 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

the "Default" and empty 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::variant
\backslash 
end{tt}
\end_inset 

 cells are read in and evaluated.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::inst
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

Defines the instance name.
 If the same name appears in several rows, the 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

resulting row will be overloaded from all input rows.
 The exact behaviour 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

depends on the column name.
 Some are concatenated, some are replaced.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::lang
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{9mm}
\end_inset 

HDL language selection, case insensitive.
 If this column is omitted or empty, 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

VHDL output is generated.
 The default value can be changed by means 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

of the macro.%LANGUAGE% macro.
 Currently only VHDL and
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

Verilog are supported (XXX: Verilog output still t.b.d.).
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::config
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{6mm}
\end_inset 

Define the configuration name.
 It defaults to %DEFAULT_CONFIG%, which 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

evaluates to %::entity%_%::arch%_conf.
 If the language of this entity is set 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

to Verilog, no configuration will be printed nor will it be added to parent
 cell 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

configurations.
 The keyword %NO_CONFIG% will also suppress output of 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

configuration for this entity.
\newline 
Additional columns:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::arch
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{9mm}
\end_inset 

If no ::arch column is given, architecture will default to "rtl".
 This is defined 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

by the configuration hier.field.::arch.[3] = rtl; and cannot be changed globally.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::use
\backslash 
end{bf}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{11mm}
\end_inset 

Add project specific libraries and work packages to the HDL description
 files.
 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{18mm}
\end_inset 

See the ::use details below.
\layout Subsubsection

::use Add Project Specific Libraries
\layout Standard

The optional "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::use
\backslash 
end{tt}
\end_inset 

" column allows to add libraries and work packages for a entity.
 Several libraries can be added, separated by comma or white space.
 In case of VHDL output, the use statement is added to the entity declaration,
 only.
 You can override that by adding a leading 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}ALL:
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}ARCH:
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}CONF:
\backslash 
end{tt}
\end_inset 

 keyword for this instance/entity.
 To change that globally, modify the configuration variable output.generate.use.
\newline 
For each given library an appropriate text sequence is added:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}foo.lib
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bar.lib.something
\backslash 
end{tt}
\end_inset 


\newline 
will be printed as
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}library foo;
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}use foo.lib.all;
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}library bar;
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}use bar.lib.something.all;
\backslash 
end{tt}
\end_inset 


\newline 
If different instantiations of a entity have different ::use
\newline 
definitions, MIX adds up all these.
\newline 
To change the global default value of
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}library IEEE;
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}use IEEE.std
\backslash 
_logic
\backslash 
_1164.all;
\backslash 
end{tt}
\end_inset 


\newline 
modify macro 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%VHDL
\backslash 
_USE
\backslash 
_DEFAULT
\backslash 
%
\backslash 
end{tt}
\end_inset 

.
\newline 
To add a library globally, add the appropriate text to the macro.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%VHDL
\backslash 
_NOPROJ
\backslash 
%
\backslash 
end{tt}
\end_inset 

 configuration, which will be used if no library is defined in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::use
\backslash 
end{tt}
\end_inset 

 column.
\newline 
A second usage is to suppress the component declaration output by the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%NDC
\backslash 
%
\backslash 
end{tt}
\end_inset 

 or 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%NO
\backslash 
_COMPONENT
\backslash 
_DECLARATION
\backslash 
%
\backslash 
end{tt}
\end_inset 

 keyword.
 This is useful for instances, whose entities are taken from libraries.
\newline 
For verilog modules (as defined in the 
\family typewriter 
::lang
\family default 
 column) the 
\family typewriter 
::use
\family default 
 column contents will be split by newline or comma and added to the verilog
 module top.
 A typical usage is for 
\family typewriter 
`defines
\family default 
 and 
\family typewriter 
`include.
 
\family default 
The text is taken literally.
 Use the text macros %DEFINE% and %INCLUDE% if you want to avoid the backtick.
\layout Standard

Examples: see 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}t/sigport.xls
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}t/sigport/use/*.vhd
\backslash 
end{tt}
\end_inset 

 for more examples.
\newline 
Configuration parameter: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}output.generate.use = enty
\backslash 
end{tt}
\end_inset 


\layout Subsection

Special HIER sheet properties
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%TOP
\backslash 
%
\backslash 
end{tt}
\end_inset 

 is a pseudo instance and used for internal purposes, only.
\layout Subsection

CONN sheet details
\layout Standard

The design connections are defined in the CONN sheet.
 The primary key of this sheet is the signalname as given in "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 

".
 Signalnames are globally known for the design.
 All appearances of a name are connected, creating intermediate ports as
 needed.
\layout Subsection

typecast
\layout Standard

The type of a signal can be typecasted by appending a function name with
 a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}'
\backslash 
end{tt}
\end_inset 

 to the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::in
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::out
\backslash 
end{tt}
\end_inset 

 definitions.
\newline 
Example:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}signal
\backslash 
_a
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::type
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}type
\backslash 
_a
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::in
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{24mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}inst
\backslash 
_a/port
\backslash 
_a'typefunc
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::out
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{22mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}inst
\backslash 
_b/port
\backslash 
_b'typefunc
\backslash 
end{tt}
\end_inset 


\newline 

\newline 
The signal 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}signal
\backslash 
_a
\backslash 
end{tt}
\end_inset 

 will be of type 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}type
\backslash 
_a
\backslash 
end{tt}
\end_inset 

, while the connecting ports of 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}inst
\backslash 
_a
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}inst
\backslash 
_b
\backslash 
end{tt}
\end_inset 

 are converted by applying the typecast function 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}typefunc
\backslash 
end{tt}
\end_inset 

.
\newline 
Caveat: typecast support is experimental.
\newline 

\layout Subsection

Automatic Generation of Toplevel Ports
\layout Standard

If the signal mode as defined in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::mode
\backslash 
end{tt}
\end_inset 

 column matches one of I, O or IO, MIX will create top level ports.
 This feature can be disabled by the configuration variable 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}output.generate.inout
\backslash 
end{tt}
\end_inset 

.
 Possible values are 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mode
\backslash 
end{tt}
\end_inset 

(enable top level port generation) and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}noxfix
\backslash 
end{tt}
\end_inset 

(do not prefix and postfix generated port names for top level ports), which
 are set by default.
 To exclude some signals from automatic top-level port generation, use 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}output.generate.xinout sig
\backslash 
_foo,sig
\backslash 
_bar
\backslash 
end{tt}
\end_inset 

.
 This feature is usefull if you need to use internal inout signals, but
 do not want to have them wired to the top-level.
\layout Subsection

CONN columns details
\layout Subsection

Special CONN sheet signals
\layout Standard

Special signal names:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%LOW
\backslash 
%
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%HIGH
\backslash 
%
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%LOW
\backslash 
_BUS
\backslash 
%
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%HIGH
\backslash 
_BUS
\backslash 
%
\backslash 
end{tt}
\end_inset 


\newline 

\layout Subsubsection

%OPEN% aka.
 open
\layout Standard

Used the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%OPEN
\backslash 
%
\backslash 
end{tt}
\end_inset 

 signal to leave some pins of module bar port a open MIX has no knowledge
 about ports.
 Everything is defined in terms of signals and instances.
 Use the "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}open
\backslash 
end{tt}
\end_inset 

" pseudo signal to define the extra pins.
\newline 

\newline 
E.g.: wire 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}foo/a
\backslash 
end{tt}
\end_inset 

 port to 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bar/a
\backslash 
end{tt}
\end_inset 

 port.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bar/a
\backslash 
end{tt}
\end_inset 

 has extra pins.
\newline 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}signal
\backslash 
_a
\backslash 
, ::high 7, ::low 0, ::out foo/a ::in bar/asn
\backslash 
newline
\newline 

\backslash 
%OPEN
\backslash 
%, ::high 1, ::low 0, ::out -, ::out bar/a(9:8)
\backslash 
end{tt}
\end_inset 


\newline 

\newline 
XXX write this in spreadsheet XXX
\newline 
You could also force the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::in
\backslash 
end{tt}
\end_inset 

 pins to high or low, instead, e.g.
 use: 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%HIGH
\backslash 
%
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%HIGH
\backslash 
_BUS
\backslash 
%
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%LOW
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%LOW
\backslash 
_BUS
\backslash 
%
\backslash 
end{tt}
\end_inset 

.
 Or a constant.
\layout Subsubsection

Constants
\layout Standard

Constant values can be defined and used in several ways in the CONN worksheet.
 Constants can be marked with a C in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::mode
\backslash 
end{tt}
\end_inset 

 column.
 Basically anything resembling a number written in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::out
\backslash 
end{tt}
\end_inset 

 column will be considered to be a constant value.
 String and bit vector constants are enclosed in single or double quotes.
 Remember to type two single quotes in excel to start a single quote string.
 Excel takes the first quote character to prevent the following string to
 be interpolated by excel.
\newline 
If you do not name a constant (leave the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 

 field empty), MIX will generate a name like 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix
\backslash 
_const
\backslash 
_N
\backslash 
end{tt}
\end_inset 

.
 N starts by one and increments for each new constant value.
\newline 
Constant values can be assigned to instance ports in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::in
\backslash 
end{tt}
\end_inset 

 column of that constant.
 
\newline 
Depending on the form of a constant and the output language, MIX tries to
 convert the constant value into something suitable.
 See the constant.xls example (XXXLINK).
\newline 

\begin_inset Graphics
	filename images/mix_table1.jpg
	lyxscale 50
	scale 50
	keepAspectRatio

\end_inset 

 
\newline 
If the target language is VHDL, XXXXX
\newline 
MIX looks like in the following screenshot:
\newline 

\begin_inset Graphics
	filename images/mix_simple_inst.jpg
	lyxscale 40
	scale 40
	keepAspectRatio

\end_inset 


\newline 
 Search for lines with 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
_
\backslash 
_E
\backslash 
end{tt}
\end_inset 

 in the comments to detect constants MIX was not able to translate properly.
 Verilog constant output is not very mature as of today.
\newline 

\layout Subsubsection

Generics and Parameters
\layout Standard

Generics for entities are defined by a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}G
\backslash 
end{bf}
\end_inset 

 in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::mode
\backslash 
end{tt}
\end_inset 

 column.
 The 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 

 column defines the generics name.
 If the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::out
\backslash 
end{tt}
\end_inset 

 column contains a string or a number, the value will be the default of
 this generic.
\newline 
A 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}P
\backslash 
end{bf}
\end_inset 

 in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::mode
\backslash 
end{tt}
\end_inset 

 column marks parameters.
 The value given in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::out
\backslash 
end{tt}
\end_inset 

 column will be applied to the instances in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::in
\backslash 
end{tt}
\end_inset 

 column.
\newline 
If the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 

 column is empty, MIX will assign a generated name.
 The HDL generic name is either the "port" name given in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::in
\backslash 
end{tt}
\end_inset 

 column or the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 

.
\newline 
A example description taken from a CONN sheet will create the following
 output in VHDL:
\newline 

\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="2cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="2cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}::type
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::mode
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::name
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::out
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::in
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

integer 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 G 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 generic_a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 7 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_a 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

integer 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 P 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 parameter_a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 16 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_a 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

string 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 G 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 generic_b 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 "text" 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_b 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

string 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 P 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 parameter_b 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 "text" 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 g/generic_b  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard


\begin_inset Graphics
	filename images/mix_generic_chip.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 

\layout Subsection

Simple text macros
\layout Standard

Text marked with with a % on both sides is subject to be replaced, if a
 macro or a postfix of that name is defined.
 See the table of predefined macros.
 Additionally the contents of the input table can be referenced like %::column_h
ead%.
 If no suitable text macro is found, the text will be left as is.
\newline 
The text macro replacement does not operate recursively in general.
\newline 

\newline 
Please consider that some text macros are used internally and some have
 a special meaning, too.
 E.g.
 the pseudo signals %OPEN% and %LOW_BUS%.
\layout Subsection

Predefined and user macros
\layout Standard

The following table contains a list of predefined macros.
 Some of them are defined at run time (e.g.
 the current date), some are for internal purposes only.
 macros marked with a yes in the "User" column can be set freely by the
 user on the command line or in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix.cfg
\backslash 
end{tt}
\end_inset 

 configuration file.
\newline 

\layout Standard

The default values can be changed by using
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-conf macro.
\backslash 
%THIS
\backslash 
_MACRO
\backslash 
%=my
\backslash 
_value
\backslash 
end{tt}
\end_inset 


\newline 
command line switch.
 New macros can be defined the same way.
\newline 
Alternatively a line like
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}MIXCFG macro.
\backslash 
%THIS
\backslash 
_MACRO
\backslash 
% my
\backslash 
_value
\backslash 
end{tt}
\end_inset 


\newline 
to the mix.cfg configuration file will achieve the same result.
\newline 

\layout Section

CONN sheet macros
\layout Standard

To simplify the wiring of standard interfaces, MIX provides the connection
 macro facility.
 The connection macros are entered just like any other connection, but are
 marked by MH, MD and MX in the ::gen column.
 MH is the macro header line, which has to be followed by one to many MD
 macro definition row.
 The first non-comment line without a MD tag stops the macro definition.
\newline 
The tag MX marks lines subject to be macro expanded.
 The macro expansion takes place after the initial tables were parsed.
\newline 
You can define simple, one-letter variabes in the macro cells.
 Any text in ::ign, ::gen, ::comment and ::descr cells of a MH and MX row
 will not be subject to matching and evaluation, but be ignored.
 Apart from that the column names have no special meaning.
\newline 

\newline 
A simple example will illustrate the connection macro usage.
\newline 

\begin_inset Graphics
	filename images/macro.jpg
	lyxscale 60
	scale 60
	keepAspectRatio

\end_inset 


\newline 
 Here the macro header MH defines the variables $n, $1, $h, $4 and $5.
 The MIX parser extracts the MH row and accompanying MD rows (five lines
 here) from the table.
 In a second run each MX row will trigger a match operation against all
 MH definitions.
 MX and MH are a match, if each cell defined in the MH row has a matching
 counterpart in the MX row.
 Variables in the MH cells are considered to match any string ( .+ in perl
 regular expression syntax).
 Thus the first MX line matches the MH lines here.
 The variables defined in the MH cells are assigned the matching values
 from the MX line.
 E.g.
 $n will be 0 for the first MX, 1 for the second.
 The variable $4 is assignd ls, $5 is min.
\newline 

\newline 
If MX and MH match, the accompanying MD lines are executed.
 Variables are replaced by the value they are assigned too, currently.
 Here the first MX will result in the following table to be generated:
\newline 

\begin_inset Graphics
	filename images/macro_out.jpg
	lyxscale 66
	scale 66

\end_inset 


\newline 
 The ::gen column is set to G_MX after evaluation.
 Empty cells in MD lines are filled with the value given by MX, if any.
\newline 

\newline 
Please see the contrib directory for commonly available connection macros
 (t.b.d.).
\layout Section

Generator statements
\layout Subsection

Hierachy Generator Operators
\layout Standard

Another powerfull feature of MIX are the generator statements.
 The generators are applied after initial tool setup and connection macro
 evaluation, first the hierachy generators, then the connection generators.
\newline 

\newline 
Generators are defined in the ::gen column.
 Basically three types are available:
\newline 

\layout Itemize

Constructor generators: $i(N..M)
\layout Itemize

Match generator: /match_expression/
\layout Itemize

Bounded match generator: $i(N..M),/match_expression/
\layout Standard

match_expression is like perl(1) regular expressions, but with some extensions
 and specials.
\newline 

\layout Subsubsection

Constructor Generator statement
\layout Standard

MIX takes the variable and the range definied in ::gen and evaluates the
 rest of the row for each value in the range.
 Currently only one variable is allowed and the range has to be of form
 (N..M).
\newline 

\newline 
A simple example illustrates the usage:
\newline 

\begin_inset Graphics
	filename images/gen_it.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 will give ten instances from inst_1 to inst_10, each being a submodule
 of inst_a with each having a entity inst_1_e to inst_10_e, dito.
 for the configuration.
 Simple arithmetic can be applied to derive values from the run time parameter
 $i.
\newline 
Constructor's will yield new instances.
 An instance name has to be given in the ::inst column.
\newline 

\layout Subsubsection

Match generator
\layout Standard

For each instance defined up to now, match_expression is evaluated.
 If this yields true, the line is executed.
 Parts of the expression in parantheses are used to set the variables $1,
 $2, ...
 accordingly.
 See the perl regular expression man page perlre(1) for more details.
 This variables can be used in the other cells.
 Simple arithmetic is possible, e.g.
 $i + 1 or $1 * 2.
\newline 
A match generator will yield new instances only if the name in the ::inst
 column is set to a value different from the matching instance.
\newline 

\newline 
Example:
\newline 

\newline 
XXX t.b.d.
\newline 

\layout Subsubsection

Bounded match generator
\layout Standard

By adding a run variable and a range $i(N..M), match generators can be restricted
 to only apply if the variable $i is within the range.
 $i has to be defined in match_expression and will match any number.
\newline 

\newline 
In opposite to the constructor generator, MIX will not evaluate all possible
 values for $i, but only make sure $i stays within the bounds of the range.
\newline 

\newline 
Example:
\newline 

\newline 
XXX t.b.d.
\newline 

\layout Subsubsection

Advanced features of the match generators
\layout Standard

The match expression can contain references to all fields of the to match
 object with the
\newline 
::NAME_OF_COL=string(match):: reference.
\newline 

\newline 
E.g.
 the connection generator
\newline 

\begin_inset Graphics
	filename images/gen_2.jpg
	lyxscale 80
	scale 80
	keepAspectRatio

\end_inset 


\newline 
 will wire all instances iom_.* having a property ::pin in the given range
 with a newly defined signal i_N_N+1.
 iom_foo with ::pin = 270 port serial_o will drive the signal i_270_271,
 the instance iom_bar with ::pin = 271 is connected to the signal i_270_271
 to it's port serial_i by the next line.
 for instance iom_foo only the first line matches, thus that module will
 net get a connection to serial_i by these generator lines.
\newline 

\newline 
A trainling :: can be omitted.
 If two propertied are to be matched, this will look like
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

/::prop1=(.*)::::prop2=string(match?)/
\layout Subsubsection

Additional Information
\layout Standard

Match generators work the same way on the CONN sheets.
 By default the match expression will match against all defined instances,
 not connections.
\newline 
To make a match expression iterate over all connection, prefix the whole
 expression by the CONN: keyword.
\newline 

\newline 
Please have a look into the distributed howto.xls and the macro.xls in the
 test case directory t to see more examples.
\layout Section

IO sheet
\layout Standard

A third category of input specification is the IO sheet.
 The contents of the IO sheet is parsed and translated into instances of
 io cell blocks and pad cells and connections of the io logic with the design
 core logic.
\newline 

\begin_inset Graphics
	filename images/mix_iocell.jpg
	lyxscale 70
	scale 70
	keepAspectRatio

\end_inset 


\newline 
 Image 3: IO Cell and Pad Layout
\newline 
The IO sheet is a simple way to specify the connections of the IO cell to
 the design core logic.
 MIX will derive the connections of the DI(0..n), DO(0..n), PU(0..n), PD(0..n),
 EN(0..n) and the accompanying select lines.
 MIX will not add special purpose connections and the IO cell to Pad cell
 connections.
 This should be done by using the macro and generator statements in the
 CONN sheets.
\newline 
A simple example illustrates the various input fields and their usage.
\newline 

\begin_inset Graphics
	filename images/mix_io_sheet.jpg
	lyxscale 40
	scale 40
	keepAspectRatio

\end_inset 


\newline 

\layout Subsection

IO sheet column header
\layout Standard

The IO sheet starts with the usual header line, defining mandatory and optional
 columns:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::ign
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{9mm}
\end_inset 

A 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
#
\backslash 
end{tt}
\end_inset 

 marks a comment line.
 Has to be first column.
 Optional.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::class
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

The class name is forwarded to the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::class
\backslash 
end{tt}
\end_inset 

 field of the CONN sheet.
 (opt.)
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::ispin
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

Set to one it this pad is actually bonded (ignored by MIX).
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::pin
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{8mm}
\end_inset 

Number or name of the pin.
 (ignored by MIX)
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::pad
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{8mm}
\end_inset 

The primary key of the IO sheet.
 Has to an integer value.
 The pad
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{32mm}
\end_inset 

numbers do not have to be consecutive.
 Mandatory column.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::type
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{7mm}
\end_inset 

Defines the entity of the generated pad cell.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::iocell
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{3mm}
\end_inset 

Defines name and entitiy of the generated io cell
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::port
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{7mm}
\end_inset 

Define the io cell port name towards to the core logic.
 Port
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{32mm}
\end_inset 

 names are separated by , and/or <Alt><CR>.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{8mm}
\end_inset 

pad name
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

-
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{4mm}
\end_inset 

Connection matrix of io cell ports to core logic.
 Signals are separated
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 

by , and/or <Alt>-<CR>.
 Signals may be single bits or a one bit bus
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 

slice.
 Type 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}core
\backslash 
_sig.N
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}core
\backslash 
_sig(N)
\backslash 
end{tt}
\end_inset 

 for bit N of the core signale
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}core
\backslash 
_sig
\backslash 
end{tt}
\end_inset 

.
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 is allowed to appear several times.
 The number of
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{33mm}
\end_inset 

signals and the order matches the port names in the ::port field.
\newline 

\layout Subsection

IO sheet %SEL% rows
\layout Standard

The rows with the key 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%SEL
\backslash 
%
\backslash 
end{tt}
\end_inset 

 in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::class
\backslash 
end{tt}
\end_inset 

 field define the wiring of the IO cells multiplexer select lines.
 The name in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::port
\backslash 
end{tt}
\end_inset 

 field defined the io cell port to connect to.
 The 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::name
\backslash 
end{tt}
\end_inset 

 field is ignored.
 The signal names listed in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 columns are connected from the designs core with the appropriate slice
 of the io cell multiplexer select lines (one hot select lines).
 The leftmost 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 connects to bit 0, the next to bit 1 and so forth.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}core
\backslash 
_sel.N
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}core
\backslash 
_cel(N)
\backslash 
end{tt}
\end_inset 

.
 can be used to wire select buses.
 The number of non-empty consecutive 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 fields also define the width of the multiplexer.
 The actual multiplexer width is stored in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%::
\backslash 
_muxwidth
\backslash 
_
\backslash 
%
\backslash 
end{tt}
\end_inset 

 field.
\newline 
The given values for the select lines are valid until the last row or another
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%SEL
\backslash 
%
\backslash 
end{tt}
\end_inset 

 line is found.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%NOSEL
\backslash 
%
\backslash 
end{tt}
\end_inset 

 will stop usage of in/out multiplexer and select lines.
\newline 
Setting the configuration switch "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.select
\backslash 
end{tt}
\end_inset 

" to "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bus
\backslash 
end{tt}
\end_inset 

" changes from a one-hot architecture to a select bus architecture.
 The select bus name is take in the leftmost 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 column, an appropriate width is calculated by the number of defined 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 columns.
\newline 

\layout Subsection

IO sheet pad rows
\layout Standard

All other rows make up the connection matrix.
 For each row an io cell is instantiated.
 By default this io cell's name is composed by the type listed in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::type
\backslash 
end{tt}
\end_inset 

 field with the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::pad
\backslash 
end{tt}
\end_inset 

 number attached, separated by a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
_
\backslash 
end{tt}
\end_inset 

.
\newline 
Secondly a pad cell is instantiated.
 By default this pad cell's name is composed from the prefix 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}pad
\backslash 
_
\backslash 
end{tt}
\end_inset 

 and the pad number as given in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::pad
\backslash 
end{tt}
\end_inset 

 field.
 The default naming for both io cell and pad is given by the configuration
 variables
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}pad.name = 
\backslash 
%PREFIX
\backslash 
_PAD
\backslash 
_GEN
\backslash 
%
\backslash 
%::pad
\backslash 
%
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.name = 
\backslash 
%::iocell
\backslash 
%
\backslash 
_
\backslash 
%::pad
\backslash 
%
\backslash 
end{tt}
\end_inset 


\newline 
You can leave unused 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::muxopt
\backslash 
end{tt}
\end_inset 

 columns empty.
 Then MIX will reduce the number of select lines accordingly.
\layout Subsection

IO cell and Pad connections
\layout Standard

MIX IO sheet parser connects the IO cell internal interface towards the
 design core logic, only.
 Connections between pad and io cell need to be defined explicitely, usually
 be means of 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::gen
\backslash 
end{tt}
\end_inset 

 match operators.
\newline 
Additonal wires for NAND tree or boundary scan are specified the same way.Signal
 busses need to be defined properly, esp.
 the width and type.
 MIX will derive these properties from the definition.
\newline 
The generated pad and iocells need to be linked into the design hierarchy
 properly, e.g.
 by adding 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::gen
\backslash 
end{tt}
\end_inset 

 match operators in the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}HIER
\backslash 
end{tt}
\end_inset 

 sheet.
\newline 

\begin_inset Graphics
	filename images/mix_hier_sheet.jpg
	lyxscale 75
	scale 40
	keepAspectRatio

\end_inset 


\newline 

\begin_inset Graphics
	filename images/mix_conn_sheet.jpg
	lyxscale 75
	scale 45
	keepAspectRatio

\end_inset 


\layout Subsection

IO Parser global configuration
\layout Standard

Some global configuration are available to tailor the IO sheet parser behaviour:
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="9cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.name
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Rule determines naming of the io cell instances.
 Default "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%::iocell
\backslash 
_
\backslash 
%::pad
\backslash 
%
\backslash 
end{tt}
\end_inset 

" 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.auto
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 If set to "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bus
\backslash 
end{tt}
\end_inset 

", create busses as needed.
 Otherwise MIX relies on appropriate definition of busses by the CONN sheets.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.bus
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 If 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.auto
\backslash 
end{tt}
\end_inset 

 is set to bus, MIX will attach the keyword listed here (
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
_vector
\backslash 
end{tt}
\end_inset 

) to signal type definitions.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.defaultdir
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Defines default iocell port direction.
 Default: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}in
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.in
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 comma and/or white-space separated list of in ports Default: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}do, en, pu, pd, xout
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.out
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 list of io-cells out ports Default: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}di, xin
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}iocell.select
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 List of keywords defining the select multiplexer connections: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}onehot
\backslash 
end{tt}
\end_inset 

 -
\begin_inset Formula $>$
\end_inset 

 use one hot architecture for select lines, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}bus
\backslash 
end{tt}
\end_inset 

 -
\begin_inset Formula $>$
\end_inset 

 use select line bus, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}auto
\backslash 
end{tt}
\end_inset 

 -
\begin_inset Formula $>$
\end_inset 

 calculate width of select bus or one-hot based on 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%SEL
\backslash 
%
\backslash 
end{tt}
\end_inset 

 width; Default: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}onehot,auto
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}pad.name
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Rule determines the naming of the pad instances.
 Default: "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
%PREFIX
\backslash 
_PAD
\backslash 
_GEN
\backslash 
%
\backslash 
%::pad
\backslash 
%
\backslash 
end{tt}
\end_inset 

"  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Section

I
\begin_inset Formula $^{2}$
\end_inset 

C sheet
\layout Standard

The I
\begin_inset Formula $^{2}$
\end_inset 

C sheet is one more category of input specification.
 It's content describes connections from other modules to I
\begin_inset Formula $^{2}$
\end_inset 

C registerblocks.
 The hierarchical position of a registerblock can be defined in the 
\family typewriter 
HIER
\family default 
-sheet.
\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C regsiterblock
\layout Standard

The I
\begin_inset Formula $^{2}$
\end_inset 

C module is split into two seperate untis called I
\begin_inset Formula $^{2}$
\end_inset 

C-kernel and I
\begin_inset Formula $^{2}$
\end_inset 

C-registerblock.
 Settings made in a MIX-I
\begin_inset Formula $^{2}$
\end_inset 

C-sheet only describe registerblock specific Informations.
 Here you can see a serial I
\begin_inset Formula $^{2}$
\end_inset 

C-registerblock.
\newline 

\begin_inset Graphics
	filename images/serial_iic_reg.png
	lyxscale 40
	scale 40
	keepAspectRatio

\end_inset 


\newline 
A I
\begin_inset Formula $^{2}$
\end_inset 

C-registerblock consists of a transceiver, one or more synchronisation blocks
 and some registers (max.
 255).
 The registers direction, synchronisation, in-/out-connections...
 can be specified in the I
\begin_inset Formula $^{2}$
\end_inset 

C sheet.
 The 
\family typewriter 
or_block
\family default 
 is a simple script generated block which connects incoming signals to a
 
\family typewriter 
or
\family default 
 and outgoing ones to the transceiver.
 This work has to be done by a MIX external script, because MIX is not thought
 for generating logics.
\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C sheet column header
\layout Standard

The following section describes the meanings of identifiers used in a MIX
 I
\begin_inset Formula $^{2}$
\end_inset 

C sheet.
 Default settings and mendatory/optional specification can be found in the
 table bellow.
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="18" columns="2">
<features>
<column alignment="left" valignment="top" width="0pt">
<column alignment="block" valignment="top" width="14cm">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::ign
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 every columns row, containing # or // is ignored by MIX
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::variants
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 select a line depending on the -variant command line switch.
 If -variant VAR is set, only lines whose 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::variant
\backslash 
end{tt}
\end_inset 

 cell contains the keyword VAR, default or empty, are selected and read
 in.
 several variants may be given in one cell, separated by ",".
 Without specifying the -variant switch, the "default" and empty 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}::variant
\backslash 
end{tt}
\end_inset 

 cells are read in and evaluated.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::ign
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 ignore this row if # is detected.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::variants
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 select a variant.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::type
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 register type; only serial registers implemented yet.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::dev
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 specify the device name
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::sub
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 define registerblock subaddress
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::interface
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 domain name
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::block
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 registerblock Name.
 The registerblock name and its sub-address are building the instance-name.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::dir
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 defines a registers input/output direction, possible values are: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}R
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}W
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}RW
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::spec
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 update signal
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::clock
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 set a clock domain.
 Every I
\begin_inset Formula $^{2}$
\end_inset 

C register may receive it's own clock.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::reset
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 specify a Reset signal.
 This signal resets the I
\begin_inset Formula $^{2}$
\end_inset 

C registers.
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::busy
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 busy signal
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::b
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 specifies a signal which is connected to a registers pin.
 This is a multiple column which can be used to set different signals to
 the same register
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::init
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 Set initializing value of register connection(s).
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::rec
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 Set recommended value of a register connection(s).
\end_inset 
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}::comment
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

 all entries in these cells are threaten as comments.
 MIX will keep comments to put them later into VHDL/Verilog output.
\newline 

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="17" columns="5">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="15mm">
<column alignment="block" valignment="top" rightline="true" width="25mm">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{bf}Column name
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Descriptionend
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Default value
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Req.
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{bf}Example
\backslash 
end{bf}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::ign 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Ignore line 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 # comm.
 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::variants 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Variant selector 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Default 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Var1 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::type 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Register type 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 serial 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 serial 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::dev 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Device name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 n/a 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 FRCA0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::sub 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Sub address 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 VHDL 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 27 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::interface 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Domain name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 W_NO_CONFIG 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 cc0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::block 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Block Name 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 mc 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::dir 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Direction 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 RW 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::spec 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Update Signal 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 NTO 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 takeover_b72 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::clock 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Clock Domain 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 clkcc81 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::reset 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Reset Signal 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 asresc_n 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::busy 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Busy Signal 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 b81 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::b 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Bit n 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 man.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 FMSYN.2 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::init 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Reset Value 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::rec 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Recommended Value 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 0 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

::comment 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 Comment field 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 
\begin_inset Formula $<$
\end_inset 

empty
\begin_inset Formula $>$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 opt.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 This is a comment  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C Parser global configuration
\layout Standard

Also here some global configuration are available to tailor the I
\begin_inset Formula $^{2}$
\end_inset 

C sheet parser behaviour:
\newline 

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<column alignment="block" valignment="top" rightline="true" width="9cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}i2c
\backslash 
_cell.type
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 specifies the default register type (default: 
\family typewriter 
ser
\family default 
) 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}i2c
\backslash 
_cell.
\backslash 
%IIC
\backslash 
_SER
\backslash 
_REG
\backslash 
%
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 set prefix for serial subregister entity (default: 
\family typewriter 
iic_ser_reg_
\family default 
)
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}i2c
\backslash 
_cell.
\backslash 
%IIC
\backslash 
_PAR
\backslash 
_REG
\backslash 
%
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 set prefix for parallel subregister entity (default: 
\family typewriter 
iic_par_reg_
\family default 
) 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}i2c
\backslash 
_cell.
\backslash 
%IIC
\backslash 
_SYNC
\backslash 
%
\backslash 
end{tt}
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

 set prefix for sync-block (default: 
\family typewriter 
sync_iic
\family default 
)  
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

I
\begin_inset Formula $^{2}$
\end_inset 

C Sheet example
\layout Standard

In this section a example will demostrate I
\begin_inset Formula $^{2}$
\end_inset 

C sheet usage, by connecting the 
\family typewriter 
a_clk
\family default 
 example to a registerblock.
 
\begin_inset Formula $<$
\end_inset 

t.b.d
\begin_inset Formula $>$
\end_inset 


\layout Section

VI2C sheet
\layout Section

Alarm clock example
\layout Section

Alarm clock example
\layout Section

MIX converter man page
\layout Subsection

Synopsis
\layout Subsection

Command line switches
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-out OUTPUTFILE.ext
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

defines output filename and type
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-outenty OUT-e.vhd|ENTY|COMB
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Write all entities into OUT-e.vhd.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

If argument is ENTY, each entity will be written
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

into a file called entityname-e.vhd..
 (The exact
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

naming depends on changeable rules).
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

If argument is COMB, entity, architecture and configuration
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

will all be written into one file called entityname.vhd
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-outarch OUT-rtl-a.vhd|ARCH|COMB
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

See description of outenty option.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-outconf OUT-c.vhd|CONF|COMB
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

See description of outenty option.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-combine
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

write entity, architecture and configuration into one file for 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

each entity.
 Shortcut for setting -out[enty|arch|conf] to COMB
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

individually.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-dir DIRECTORY
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

write intermediate, internal and backend data into the given
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

DIRECTORY.
 By default MIX writes to the current working directory
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-top TOPCELL
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

use TOPCELL as top.
 Default is TESTBENCH or daughter of TESTBENCH.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-adump
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

dump internal data in ASCII format, too
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

(debugging, use with small data set).
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-variant VAR1
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
hspace*{15mm}
\end_inset 

Select VAR1 from the HIER worksheet.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-conf key.key.key=value
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Overload $EHkeykeykey with value or add a
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

new configuration variable.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-listconf
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Print out all available/predefined configurations options
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-delta
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Output will be compared against previous runs.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-sheet SHEET=MATCH
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

SHEET can be one of "hier", "conn", "vi2c".
 MATCH is
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

a perl regular expression.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-strip
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

Remove old and diff sheets.
 These sheets are named with "O_" or "DIFF".
\newline 

\newline 
# Add your options here ....
\newline 

\newline 

\newline 
"Standard" options:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}my @stdopts = qw(help|h! verbose|v! quiet|q! nobanner!  debug:i
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}makeopts=s@ gmakeopts=s@);
\backslash 
end{tt}
\end_inset 


\newline 
Caveat: the -h option will not work on MS-Windows
\layout Subsection

Runtime options and configuration
\layout Standard

Runtime configuration is controlled by (increasing precedence): 
\layout Itemize

built-in default values 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix.cfg
\backslash 
end{tt}
\end_inset 

 files, if found 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
$HOME
\backslash 
end{tt}
\end_inset 

, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
$PROJECT
\backslash 
end{tt}
\end_inset 

 and/or in current directory.
 Format is: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}MIXCFG name.of.conf
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
begin{it}value
\backslash 
end{it}
\end_inset 


\layout Itemize

CONF sheet found in input xls files 
\layout Itemize

command line switch: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-conf foo.bar=
\backslash 
end{tt}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{it}value
\backslash 
end{it}
\end_inset 


\layout Itemize

dedicated command line options 
\layout Standard

MIX reads in 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix.cfg
\backslash 
end{tt}
\end_inset 

 configuration files in the following locations: 
\layout Enumerate


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
$ENV
\backslash 
{HOME
\backslash 
end{tt}
\end_inset 

}
\newline 
"
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}HOMEDRIVE
\backslash 
end{tt}
\end_inset 

", "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}HOMEPATH
\backslash 
end{tt}
\end_inset 

", "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}USERPROFILE
\backslash 
end{tt}
\end_inset 

" or "
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}C:
\backslash 
(
\backslash 
backslash
\backslash 
)
\backslash 
end{tt}
\end_inset 

"
\newline 
(only from the first matching location)
\newline 

\layout Enumerate


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}
\backslash 
$ENV
\backslash 
{PROJECT
\backslash 
}
\backslash 
end{tt}
\end_inset 


\layout Enumerate

"
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}.
\backslash 
end{tt}
\end_inset 

" (cwd)
\layout Standard

Order: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}HOME
\backslash 
end{tt}
\end_inset 

 / 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}HOME
\backslash 
end{tt}
\end_inset 

 / 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}cwd()
\backslash 
end{tt}
\end_inset 

 / 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-conf
\backslash 
end{tt}
\end_inset 

 (last wins)
\layout Subsection

Misc features
\layout Subsubsection

-delta mode
\layout Standard

Do not change output files, but report number of changes.
 Adds extra sheets 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}DIFF
\backslash 
_CONN
\backslash 
end{tt}
\end_inset 

 and 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}DIFF
\backslash 
_HIER
\backslash 
end{tt}
\end_inset 

 (and old versions of them) to the intermediate output.
 The 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}FOO.pld
\backslash 
end{tt}
\end_inset 

 internal output gets overwritten, though.
 All messages are appended to 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix
\backslash 
_0.pl
\backslash 
end{tt}
\end_inset 


\newline 
If a new HDL-file needs to be created by the changes, the -delta mode is
 not be applied for that file, but it is generated as new.
 If you never have written a 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}FOO-mixed.xls
\backslash 
end{tt}
\end_inset 

 intermediate output, there is no 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}HIER
\backslash 
end{tt}
\end_inset 

 or 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}CONN
\backslash 
end{tt}
\end_inset 

 sheet generated.
\newline 
By adding the following two lines to your configuration (e.g.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}./mix.cfg
\backslash 
end{tt}
\end_inset 

), delta mode will be the default:
\newline 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}MIXCFG output.generate.delta 1
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}MIXCFG output.delta sort,remove
\backslash 
end{tt}
\end_inset 


\newline 

\newline 
See the configuration option description for more details.
\newline 

\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-nodelta
\backslash 
end{tt}
\end_inset 

 switches delta mode off, then.
\newline 

\layout Subsubsection

Intermediate Excel Sheet
\layout Standard

Format of intermediate xls sheet will be kept as is as long as the number
 and order of columns is unchanged.
\newline 
MIX saves three old versions of the generated 
\series bold 
HIER 
\series default 
and 
\series bold 
CONN 
\series default 
sheets.
 The worksheets names are rotated by a trailing _ and number, e.g 
\series bold 
HIER_0
\series default 
, 
\series bold 
HIER_1
\series default 
, ....
\layout Subsubsection

Output Redirection
\layout Standard

MIX writes all output into the current working directory.
 By using the
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}-dir DIRECTORY
\backslash 
end{tt}
\end_inset 


\newline 
option, you can set the output directory for all intermediate, internal
 and HDL files to 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}DIRECTORY
\backslash 
end{tt}
\end_inset 

.
 Absolute path names defined by other options (e.g.
 -out) are not changed, though.
 If 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}DIRECTORY
\backslash 
end{tt}
\end_inset 

 does not exist it will be created.
 To have separate output directories, use the 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}mix.cfg
\backslash 
end{tt}
\end_inset 

 file:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}MIXCFG output.path HDLDIRS
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tt}MIXCFG internal.path MIXINTERNAL
\backslash 
end{tt}
\end_inset 


\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tt}MIXCFG intermediate MIXINTERMEDIATE
\backslash 
end{tt}
\end_inset 


\newline 
writes internal, intermediate and HDL files to the given pathes.
 All directories have to exist and will not be created.
\layout Section

Alarm clock example
\layout Subsection

Core logic
\layout Subsection

IO logic
\layout Section

Other examples
\layout Section

Known Bugs and limitations
\layout Standard

MS-Win/UNIX end-of-line issue: Some EDA tools are not able to cope with
 the different end-of-line (CR vs LF/CR) of UNIX and MS-Windows.
 Use:
\layout Standard


\family typewriter 
$ module load freeware; recode 
\begin_inset Quotes eld
\end_inset 

ps..lat1
\begin_inset Quotes erd
\end_inset 

 *.vhd
\family default 

\newline 
or (in MIX's Base directory):
\newline 

\family typewriter 
$ dos2unix.pl <filename>
\family default 

\newline 
for Dos to Unix convertion and
\newline 

\family typewriter 
$ unix2dos.pl <filename>
\family default 

\newline 
for Unix to Dos convertion.
\layout Section

Issue tracking: CADNET - Issue tracking - CAD Software - MIX
\layout Standard

If you find unexpected or buggy behavior, please issue a trouble ticket.
 Don't forget to add a short description.
 The test case should contain all source files and also log files, the exact
 command line switches and configuration files applied.
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{it}Please provide a comprehensive description of issues found including all required input data and command line switch to allow fast debugging and fixing.
\backslash 
end{it}
\end_inset 


\layout Section

Links
\layout Subsection

MIX paper and documentation
\layout Standard


\emph on 
EDP_2003_final_030331.pdf
\emph default 

\newline 

\emph on 
MIX_Specification.xls
\emph default 
 (see 
\backslash 

\backslash 
Galaxy
\backslash 
Development
\backslash 
PROJECTS
\backslash 
MIX
\backslash 
MIX_Intro.ppt)
\layout Subsection

Micronas internal
\layout Standard


\emph on 
Micronas HDL coding guidelines.pdf
\layout Subsection

Others
\layout Subsection

Resources
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

Downloads for:
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 

- IO Examples
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 

- Standard bus examples
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 

- NAND Tree
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 

- BS example
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{20mm}
\end_inset 

- miscellaneous useful macros
\newline 

\layout Subsection

Used Software
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

- Perl
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

- Komodo
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

- Vim
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{15mm}
\end_inset 

- WinCVS
\newline 

\layout Subsection

Release Notes
\layout Subsubsection

20030716
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

see doc
\begin_inset Formula $\backslash$
\end_inset 

release_20030716.txt
\layout Subsubsection

20030709
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

see doc
\begin_inset Formula $\backslash$
\end_inset 

release_20030709.txt
\layout Subsubsection

20030605
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace*{10mm}
\end_inset 

See doc
\begin_inset Formula $\backslash$
\end_inset 

release_20030605.txt
\the_end
