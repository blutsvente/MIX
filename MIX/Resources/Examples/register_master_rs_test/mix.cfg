#
# MIX core settings
#

# define output dirs
MIXCFG output.path v
MIXCFG output.path_include include
MIXCFG internal.path tmp
MIXCFG intermediate.path tmp
MIXCFG intermediate.keep 1

# HDL output format
MIXCFG output.generate.portmapsort input
MIXCFG output.language.verilog ansistyle,2001param 
#MIXCFG output.language.verilog %EMPTY% 

# create seperate files for each module
MIXCFG outarch ARCH
MIXCFG outenty ENTY
MIXCFG outconf CONF

# change check to leave unused signals untouched 
#MIXCFG check.signal "load,driver,check"

# disable check for lower-case ports
MIXCFG check.name.all na

# use signal name as port name
# MIXCFG port.generate.name signal

# instance naming
MIXCFG postfix.PREFIX_INSTANCE %EMPTY%
MIXCFG postfix.POSTFIX_INSTANCE _i

# type of register-master (don't change)
MIXCFG i2c.regmas_type VGCA

#
# Mix user settings for STL file generation
#

# initial idle cycles for test
MIXCFG reg_shell.stl.initial_idle 100

# comma-seperated list of register names to be excluded from test
#MIXCFG reg_shell.stl.exclude_regs FE_YCDET_M_0x8, FE_MVDET_M_0x28
 
# if 1, domain base-address will be added to register-offset
# note: currently, domain base-address can not be determined by MIX
MIXCFG reg_shell.stl.use_base_addr 0

#
# cloning parameters
#

# number of address bits reserved for every clone
# MIXCFG reg_shell.clone.addr_spacing 8

# number of clones
MIXCFG reg_shell.clone.number 0

# naming rules for registers (used only if use_reg_name_as_prefix=1) and fields
# note: the field names are used in generated Verilog, the register names are not (but e.g. in e-code)
# MIXCFG reg_shell.clone.reg_naming %R_%N
# MIXCFG reg_shell.clone.field_naming %F_%N

# specify whether every clone has its unique clock domain
# MIXCFG reg_shell.clone.unique_clocks 0

#
# MIX user settings for register-shell and hierarchy generation
#

# IMPORTANT: sheet name in register-master xls file
MIXCFG i2c.xls rs_test

# define view(s) to generate
#MIXCFG reg_shell.type E_VR_AD
MIXCFG reg_shell.type HDL-ihb-rs,STL,ip-xact

# name of primary clock and reset (also OCP bus clock)
MIXCFG reg_shell.bus_clock clk_f20
MIXCFG reg_shell.bus_reset res_f20_n
#MIXCFG reg_shell.bus_clock clk
#MIXCFG reg_shell.bus_reset res_n

# if 1, create one config register block per clock domain
MIXCFG reg_shell.multi_clock_domains 1

# number of multicycles for read-mux (only meaningful if reg_shell.read_pipeline_lvl==0)
MIXCFG reg_shell.read_multicycle 0

# read-pipeline generation control; the value is the number of address bits, for which
# a pipeline stage will be inserted; set to 0 or high value to disable
MIXCFG reg_shell.read_pipeline_lvl 6

# if 1, infer HDL clock-gating cells
MIXCFG reg_shell.infer_clock_gating 0

# if 1, infer SystemVerilog assertions
MIXCFG reg_shell.infer_sva 1

# if 1, add takeover outputs for SCCs
MIXCFG reg_shell.add_takeover_signals 0

# if 1, will infer a reset synchronizer for the power-on reset
MIXCFG reg_shell.infer_reset_syncer 0

# if 0, will allow registers at same address (for read-only/write-only registers with double meaning)
MIXCFG reg_shell.enforce_unique_addr 1

# naming scheme for fields
MIXCFG reg_shell.field_naming %lF

# naming scheme for registers
MIXCFG reg_shell.reg_naming %lR

# naming scheme for domains
MIXCFG reg_shell.domain_naming %D

# end
