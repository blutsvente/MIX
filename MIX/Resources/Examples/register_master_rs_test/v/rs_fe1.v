// -------------------------------------------------------------
//
// Generated Architecture Declaration for rtl of rs_fe1
//
// Generated
//  by:  lutscher
//  on:  Tue Jun 23 11:51:21 2009
//  cmd: /home/lutscher/work/MIX/mix_1.pl rs_test.xls
//
// !!! Do not edit this file! Autogenerated by MIX !!!
// $Author$
// $Id$
// $Date$
// $Log$
//
// Based on Mix Verilog Architecture Template built into RCSfile: MixWriter.pm,v 
// Id: MixWriter.pm,v 1.109 2008/04/01 12:48:34 wig Exp 
//
// Generator: mix_1.pl Revision: 1.3 , wilfried.gaensheimer@micronas.com
// (C) 2003,2005 Micronas GmbH
//
// --------------------------------------------------------------


`timescale 1ns/10ps



//
//
// Start of Generated Module rtl of rs_fe1
//

// No user `defines in this module
`define	tie0_1_c	1'b0	


module rs_fe1
//
// Generated Module rs_fe1_i
//
	(
		input	wire		clk_f20_i,
		input	wire		res_f20_n_i,
		input	wire		mreset_n_i,
		input	wire	[2:0]	mcmd_i,
		input	wire	[13:0]	maddr_i,
		input	wire	[31:0]	mdata_i,
		input	wire		mrespaccept_i,
		output	wire		scmdaccept_o,
		output	wire	[1:0]	sresp_o,
		output	wire	[31:0]	sdata_o,
		output	wire		sinterrupt_o,
		input	wire		clk_a_i,
		input	wire		res_a_n_i,
		output	wire	[2:0]	cvbsdetect_par_o,
		input	wire	[2:0]	cvbsdetect_set_p_i,
		output	wire		cvbsdetect_trg_p_o,
		input	wire	[7:0]	sha_r_test_par_i,
		output	wire		sha_r_test_trg_p_o,
		input	wire		usr_r_test_par_i,
		input	wire		usr_r_test_trans_done_p_i,
		output	wire		usr_r_test_rd_p_o,
		input	wire		ycdetect_par_i,
		output	wire	[3:0]	mvstart_par_o,
		output	wire	[3:0]	mvstop_par_o,
		input	wire	[1:0]	usr_ali_par_i,
		input	wire		usr_ali_trans_done_p_i,
		output	wire		usr_ali_rd_p_o,
		output	wire	[3:0]	usr_rw_test_par_o,
		input	wire	[3:0]	usr_rw_test_in_par_i,
		input	wire		usr_rw_test_trans_done_p_i,
		output	wire		usr_rw_test_rd_p_o,
		output	wire		usr_rw_test_wr_p_o,
		output	wire	[31:0]	sha_rw2_par_o,
		output	wire	[15:0]	wd_16_test_par_o,
		output	wire	[7:0]	wd_16_test2_par_o,
		output	wire		wd_16_test2_trg_p_o,
		input	wire		upd_rw_en_i,
		input	wire		upd_rw_force_i,
		input	wire		upd_rw_i,
		input	wire		upd_r_en_i,
		input	wire		upd_r_force_i,
		input	wire		upd_r_i,
		output	wire	[3:0]	dgatel_par_o,
		output	wire	[4:0]	dgates_par_o,
		output	wire	[2:0]	dummy_fe_par_o,
		output	wire	[3:0]	sha_w_test_par_o,
		output	wire		sha_w_test_trg_p_o,
		output	wire	[3:0]	usr_w_test_par_o,
		input	wire		usr_w_test_trans_done_p_i,
		output	wire		usr_w_test_wr_p_o,
		output	wire	[3:0]	w_test_par_o,
		input	wire	[2:0]	r_test_par_i,
		output	wire		r_test_trg_p_o,
		input	wire		upd_w_en_i,
		input	wire		upd_w_force_i,
		input	wire		upd_w_i
	);

	// Module parameters:
		parameter P__MVSTOP = -1;
		parameter P__CVBSDETECT = -1;
		parameter P__WD_16_TEST2 = -1;
		parameter P__WD_16_TEST = -1;
		parameter P__SHA_RW2 = -1;
		parameter P__MVSTART = -1;
		parameter P__SHA_W_TEST = -1;
		parameter P__W_TEST = -1;
		parameter P__DUMMY_FE = -1;
		parameter P__DGATES = -1;
		parameter P__DGATEL = -1;
// End of generated module header


	// Internal signals

	//
	// Generated Signal List
	//
		wire	[13:0]	addr; 
		wire		clk_a; // __W_PORT_SIGNAL_MAP_REQ
		wire		clk_f20; // __W_PORT_SIGNAL_MAP_REQ
		wire	[2:0]	cvbsdetect_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[2:0]	cvbsdetect_set_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		cvbsdetect_trg_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	dgatel_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[4:0]	dgates_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[2:0]	dummy_fe_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[13:0]	maddr; // __W_PORT_SIGNAL_MAP_REQ
		wire	[2:0]	mcmd; // __W_PORT_SIGNAL_MAP_REQ
		wire	[31:0]	mdata; // __W_PORT_SIGNAL_MAP_REQ
		wire		mreset_n; // __W_PORT_SIGNAL_MAP_REQ
		wire		mrespaccept; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	mvstart_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	mvstop_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		pre_dec; 
		wire		pre_dec_err; 
		wire	[2:0]	r_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		r_test_trg_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[31:0]	rd_data; 
		wire	[63:0]	rd_data_vec; 
		wire		rd_err; 
		wire	[1:0]	rd_err_vec; 
		wire		rd_wr; 
		wire		res_a_n; // __W_PORT_SIGNAL_MAP_REQ
		wire		res_f20_n; // __W_PORT_SIGNAL_MAP_REQ
		wire		scmdaccept; // __W_PORT_SIGNAL_MAP_REQ
		wire	[31:0]	sdata; // __W_PORT_SIGNAL_MAP_REQ
		wire	[7:0]	sha_r_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		sha_r_test_trg_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[31:0]	sha_rw2_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	sha_w_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		sha_w_test_trg_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		sinterrupt; // __W_PORT_SIGNAL_MAP_REQ
		wire	[1:0]	sresp; // __W_PORT_SIGNAL_MAP_REQ
		wire		tie0_1; 
		wire		trans_done; 
		wire	[1:0]	trans_done_vec; 
		wire		trans_start; 
		wire		trans_start_0; 
		wire		trans_start_1; 
		wire		upd_r; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_r_en; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_r_force; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_rw; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_rw_en; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_rw_force; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_w; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_w_en; // __W_PORT_SIGNAL_MAP_REQ
		wire		upd_w_force; // __W_PORT_SIGNAL_MAP_REQ
		wire	[1:0]	usr_ali_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_ali_rd_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_ali_trans_done_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_r_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_r_test_rd_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_r_test_trans_done_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	usr_rw_test_in_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	usr_rw_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_rw_test_rd_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_rw_test_trans_done_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_rw_test_wr_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	usr_w_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_w_test_trans_done_p; // __W_PORT_SIGNAL_MAP_REQ
		wire		usr_w_test_wr_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[3:0]	w_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[7:0]	wd_16_test2_par; // __W_PORT_SIGNAL_MAP_REQ
		wire		wd_16_test2_trg_p; // __W_PORT_SIGNAL_MAP_REQ
		wire	[15:0]	wd_16_test_par; // __W_PORT_SIGNAL_MAP_REQ
		wire	[31:0]	wr_data; 
		wire		ycdetect_par; // __W_PORT_SIGNAL_MAP_REQ
	//
	// End of Generated Signal List
	//


	// %COMPILER_OPTS%

	//
	// Generated Signal Assignments
	//
		assign	clk_a	=	clk_a_i;  // __I_I_BIT_PORT
		assign	clk_f20	=	clk_f20_i;  // __I_I_BIT_PORT
		assign	cvbsdetect_par_o	=	cvbsdetect_par;  // __I_O_BUS_PORT
		assign	cvbsdetect_set_p	=	cvbsdetect_set_p_i;  // __I_I_BUS_PORT
		assign	cvbsdetect_trg_p_o	=	cvbsdetect_trg_p;  // __I_O_BIT_PORT
		assign	dgatel_par_o	=	dgatel_par;  // __I_O_BUS_PORT
		assign	dgates_par_o	=	dgates_par;  // __I_O_BUS_PORT
		assign	dummy_fe_par_o	=	dummy_fe_par;  // __I_O_BUS_PORT
		assign	maddr	=	maddr_i;  // __I_I_BUS_PORT
		assign	mcmd	=	mcmd_i;  // __I_I_BUS_PORT
		assign	mdata	=	mdata_i;  // __I_I_BUS_PORT
		assign	mreset_n	=	mreset_n_i;  // __I_I_BIT_PORT
		assign	mrespaccept	=	mrespaccept_i;  // __I_I_BIT_PORT
		assign	mvstart_par_o	=	mvstart_par;  // __I_O_BUS_PORT
		assign	mvstop_par_o	=	mvstop_par;  // __I_O_BUS_PORT
		assign	r_test_par	=	r_test_par_i;  // __I_I_BUS_PORT
		assign	r_test_trg_p_o	=	r_test_trg_p;  // __I_O_BIT_PORT
		assign	res_a_n	=	res_a_n_i;  // __I_I_BIT_PORT
		assign	res_f20_n	=	res_f20_n_i;  // __I_I_BIT_PORT
		assign	scmdaccept_o	=	scmdaccept;  // __I_O_BIT_PORT
		assign	sdata_o	=	sdata;  // __I_O_BUS_PORT
		assign	sha_r_test_par	=	sha_r_test_par_i;  // __I_I_BUS_PORT
		assign	sha_r_test_trg_p_o	=	sha_r_test_trg_p;  // __I_O_BIT_PORT
		assign	sha_rw2_par_o	=	sha_rw2_par;  // __I_O_BUS_PORT
		assign	sha_w_test_par_o	=	sha_w_test_par;  // __I_O_BUS_PORT
		assign	sha_w_test_trg_p_o	=	sha_w_test_trg_p;  // __I_O_BIT_PORT
		assign	sinterrupt_o	=	sinterrupt;  // __I_O_BIT_PORT
		assign	sresp_o	=	sresp;  // __I_O_BUS_PORT
		assign	tie0_1	= `tie0_1_c;
		assign	upd_r	=	upd_r_i;  // __I_I_BIT_PORT
		assign	upd_r_en	=	upd_r_en_i;  // __I_I_BIT_PORT
		assign	upd_r_force	=	upd_r_force_i;  // __I_I_BIT_PORT
		assign	upd_rw	=	upd_rw_i;  // __I_I_BIT_PORT
		assign	upd_rw_en	=	upd_rw_en_i;  // __I_I_BIT_PORT
		assign	upd_rw_force	=	upd_rw_force_i;  // __I_I_BIT_PORT
		assign	upd_w	=	upd_w_i;  // __I_I_BIT_PORT
		assign	upd_w_en	=	upd_w_en_i;  // __I_I_BIT_PORT
		assign	upd_w_force	=	upd_w_force_i;  // __I_I_BIT_PORT
		assign	usr_ali_par	=	usr_ali_par_i;  // __I_I_BUS_PORT
		assign	usr_ali_rd_p_o	=	usr_ali_rd_p;  // __I_O_BIT_PORT
		assign	usr_ali_trans_done_p	=	usr_ali_trans_done_p_i;  // __I_I_BIT_PORT
		assign	usr_r_test_par	=	usr_r_test_par_i;  // __I_I_BIT_PORT
		assign	usr_r_test_rd_p_o	=	usr_r_test_rd_p;  // __I_O_BIT_PORT
		assign	usr_r_test_trans_done_p	=	usr_r_test_trans_done_p_i;  // __I_I_BIT_PORT
		assign	usr_rw_test_in_par	=	usr_rw_test_in_par_i;  // __I_I_BUS_PORT
		assign	usr_rw_test_par_o	=	usr_rw_test_par;  // __I_O_BUS_PORT
		assign	usr_rw_test_rd_p_o	=	usr_rw_test_rd_p;  // __I_O_BIT_PORT
		assign	usr_rw_test_trans_done_p	=	usr_rw_test_trans_done_p_i;  // __I_I_BIT_PORT
		assign	usr_rw_test_wr_p_o	=	usr_rw_test_wr_p;  // __I_O_BIT_PORT
		assign	usr_w_test_par_o	=	usr_w_test_par;  // __I_O_BUS_PORT
		assign	usr_w_test_trans_done_p	=	usr_w_test_trans_done_p_i;  // __I_I_BIT_PORT
		assign	usr_w_test_wr_p_o	=	usr_w_test_wr_p;  // __I_O_BIT_PORT
		assign	w_test_par_o	=	w_test_par;  // __I_O_BUS_PORT
		assign	wd_16_test2_par_o	=	wd_16_test2_par;  // __I_O_BUS_PORT
		assign	wd_16_test2_trg_p_o	=	wd_16_test2_trg_p;  // __I_O_BIT_PORT
		assign	wd_16_test_par_o	=	wd_16_test_par;  // __I_O_BUS_PORT
		assign	ycdetect_par	=	ycdetect_par_i;  // __I_I_BIT_PORT




	//
	// Generated Instances and Port Mappings
	//
		// Generated Instance Port Map for rs_cfg_fe1_clk_a_i
		rs_cfg_fe1_clk_a	#(
			.P__DGATEL(P__DGATEL),
			.P__DGATES(P__DGATES),
			.P__DUMMY_FE(P__DUMMY_FE),
			.P__SHA_W_TEST(P__SHA_W_TEST),
			.P__W_TEST(P__W_TEST),
			.sync(1)
		) rs_cfg_fe1_clk_a_i (	// Config register module for clock domain 'clk_a'

			.addr_i(addr),
			.clk_a_i(clk_a),
			.dgatel_par_o(dgatel_par),
			.dgates_par_o(dgates_par),
			.dummy_fe_par_o(dummy_fe_par),
			.r_test_par_i(r_test_par),
			.r_test_trg_p_o(r_test_trg_p),
			.rd_data_o(rd_data_vec[31:0]),
			.rd_err_o(rd_err_vec[0]),
			.rd_wr_i(rd_wr),
			.res_a_n_i(res_a_n),
			.sha_w_test_par_o(sha_w_test_par),
			.sha_w_test_trg_p_o(sha_w_test_trg_p),
			.trans_done_o(trans_done_vec[0]),
			.trans_start_0_i(trans_start_0),
			.upd_w_en_i(upd_w_en),
			.upd_w_force_i(upd_w_force),
			.upd_w_i(upd_w),
			.usr_w_test_par_o(usr_w_test_par),
			.usr_w_test_trans_done_p_i(usr_w_test_trans_done_p),
			.usr_w_test_wr_p_o(usr_w_test_wr_p),
			.w_test_par_o(w_test_par),
			.wr_data_i(wr_data)
		);
		// End of Generated Instance Port Map for rs_cfg_fe1_clk_a_i

		// Generated Instance Port Map for rs_cfg_fe1_i
		rs_cfg_fe1	#(
			.P__CVBSDETECT(P__CVBSDETECT),
			.P__MVSTART(P__MVSTART),
			.P__MVSTOP(P__MVSTOP),
			.P__SHA_RW2(P__SHA_RW2),
			.P__WD_16_TEST(P__WD_16_TEST),
			.P__WD_16_TEST2(P__WD_16_TEST2),
			.sync(0)
		) rs_cfg_fe1_i (	// Config register module

			.addr_i(addr),
			.clk_f20_i(clk_f20),
			.cvbsdetect_par_o(cvbsdetect_par),
			.cvbsdetect_set_p_i(cvbsdetect_set_p),
			.cvbsdetect_trg_p_o(cvbsdetect_trg_p),
			.mvstart_par_o(mvstart_par),
			.mvstop_par_o(mvstop_par),
			.rd_data_o(rd_data_vec[63:32]),
			.rd_err_o(rd_err_vec[1]),
			.rd_wr_i(rd_wr),
			.res_f20_n_i(res_f20_n),
			.sha_r_test_par_i(sha_r_test_par),
			.sha_r_test_trg_p_o(sha_r_test_trg_p),
			.sha_rw2_par_o(sha_rw2_par),
			.trans_done_o(trans_done_vec[1]),
			.trans_start_1_i(trans_start_1),
			.upd_r_en_i(upd_r_en),
			.upd_r_force_i(upd_r_force),
			.upd_r_i(upd_r),
			.upd_rw_en_i(upd_rw_en),
			.upd_rw_force_i(upd_rw_force),
			.upd_rw_i(upd_rw),
			.usr_ali_par_i(usr_ali_par),
			.usr_ali_rd_p_o(usr_ali_rd_p),
			.usr_ali_trans_done_p_i(usr_ali_trans_done_p),
			.usr_r_test_par_i(usr_r_test_par),
			.usr_r_test_rd_p_o(usr_r_test_rd_p),
			.usr_r_test_trans_done_p_i(usr_r_test_trans_done_p),
			.usr_rw_test_in_par_i(usr_rw_test_in_par),
			.usr_rw_test_par_o(usr_rw_test_par),
			.usr_rw_test_rd_p_o(usr_rw_test_rd_p),
			.usr_rw_test_trans_done_p_i(usr_rw_test_trans_done_p),
			.usr_rw_test_wr_p_o(usr_rw_test_wr_p),
			.wd_16_test2_par_o(wd_16_test2_par),
			.wd_16_test2_trg_p_o(wd_16_test2_trg_p),
			.wd_16_test_par_o(wd_16_test_par),
			.wr_data_i(wr_data),
			.ycdetect_par_i(ycdetect_par)
		);
		// End of Generated Instance Port Map for rs_cfg_fe1_i

		// Generated Instance Port Map for rs_fe1_pre_dec_i
		rs_fe1_pre_dec	#(
			.N_DOMAINS(2)
		) rs_fe1_pre_dec_i (	// Multi-clock-domain Pre-decoder

			.addr_i(addr),
			.pre_dec_err_o(pre_dec_err),
			.pre_dec_o(pre_dec)
		);
		// End of Generated Instance Port Map for rs_fe1_pre_dec_i

		// Generated Instance Port Map for u0_sci_target_0002_i
		sci_target_0002	#(
			.P_AWIDTH(14),
			.P_DWIDTH(32),
			.P_ECSADDR(44),
			.P_MIX_SIG("M1"),
			.def_ien_p(0),
			.def_rerr_en_p(0),
			.def_val_p(7),
			.ecs_writable_p(1),
			.has_ecs(1),
			.sync(0)
		) u0_sci_target_0002_i (	// OCP target module

			.addr_o(addr),
			.clk_i(clk_f20),
			.maddr_i(maddr),
			.mcmd_i(mcmd),
			.mdata_i(mdata),
			.mreset_n_i(mreset_n),
			.mrespaccept_i(mrespaccept),
			.rd_data_i(rd_data),
			.rd_err_i(rd_err),
			.rd_wr_o(rd_wr),
			.reset_n_i(res_f20_n),
			.scmdaccept_o(scmdaccept),
			.sdata_o(sdata),
			.sinterrupt_o(sinterrupt),
			.sresp_o(sresp),
			.trans_done_i(trans_done),
			.trans_start_o(trans_start),
			.wr_data_o(wr_data),
			.wr_err_i(tie0_1)
		);
		// End of Generated Instance Port Map for u0_sci_target_0002_i

`ifdef ASSERT_ON
// synopsys translate_off
		// Generated Instance Port Map for u1_sci_target_m_checker_i
		sci_target_m_checker	#(
			.P_AWIDTH(14),
			.P_DWIDTH(32),
			.P_WRITERESP_ENABLE(0)
		) u1_sci_target_m_checker_i (	// OCP master checker module

			.clk_i(clk_f20),
			.maddr_i(maddr),
			.mcmd_i(mcmd),
			.mdata_i(mdata),
			.mreset_n_i(mreset_n),
			.mrespaccept_i(mrespaccept),
			.reset_n_i(res_f20_n),
			.scmdaccept_i(scmdaccept),
			.sresp_i(sresp)
		);
		// End of Generated Instance Port Map for u1_sci_target_m_checker_i

 // synopsys translate_on
`endif
		// Generated Instance Port Map for u2_rs_mcda_0002_i
		rs_mcda_0002	#(
			.N_DOMAINS(2),
			.N_SYNCDOM(1),
			.P_DWIDTH(32),
			.P_MIX_SIG("M1"),
			.P_PRDWIDTH(1)
		) u2_rs_mcda_0002_i (	// Multi-clock-domain Adapter
			.clk_ocp(clk_f20),
			.mreset_n_i(mreset_n),
			.pre_dec_err_i(pre_dec_err),
			.pre_dec_i(pre_dec),
			.rd_data_o(rd_data),
			.rd_data_vec_i(rd_data_vec),
			.rd_err_o(rd_err),
			.rd_err_vec_i(rd_err_vec),
			.rst_ocp_n_i(res_f20_n),
			.trans_done_o(trans_done),
			.trans_done_vec_i(trans_done_vec),
			.trans_start_i(trans_start),
			.trans_start_vec_o({ trans_start_1, trans_start_0 }) // __I_BIT_TO_BUSPORT (x2) // __I_COMBINE_SPLICES
		);
		// End of Generated Instance Port Map for u2_rs_mcda_0002_i



endmodule
//
// End of Generated Module rtl of rs_fe1
//

//
//!End of Module/s
// --------------------------------------------------------------
