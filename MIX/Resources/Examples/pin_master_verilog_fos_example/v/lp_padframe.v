// -------------------------------------------------------------
//
// Generated Architecture Declaration for rtl of lp_padframe
//
// Generated
//  by:  lutscher
//  on:  Fri Jun 26 13:24:43 2009
//  cmd: /tools/mix/1.9//mix_1.pl -vinc global_project.i -nodelta LP-blue-pin-list.xls LP-paris-pin-list.xls LP-reallity-pin-list.xls LP-HIER.xls
//
// !!! Do not edit this file! Autogenerated by MIX !!!
// $Author$
// $Id$
// $Date$
// $Log$
//
// Based on Mix Verilog Architecture Template built into RCSfile: MixWriter.pm,v 
// Id: MixWriter.pm,v 1.109 2008/04/01 12:48:34 wig Exp 
//
// Generator: mix_1.pl Revision: 1.3 , wilfried.gaensheimer@micronas.com
// (C) 2003,2005 Micronas GmbH
//
// --------------------------------------------------------------


`timescale 1ns/10ps



//
//
// Start of Generated Module rtl of lp_padframe
//

// No user `defines in this module


module lp_padframe
//
// Generated Module lp_padframe_i1
//
	(
		ext0_pad_di,
		vec_in_0_pad_di,
		vec_in_1_pad_di,
		vec_in_2_pad_di,
		vec_in_3_pad_di,
		vec_in_4_pad_di,
		vec_in_5_pad_di,
		vec_in_6_pad_di,
		vec_in_7_pad_di,
		vec_out_0_pad_do,
		vec_out_1_pad_do,
		vec_out_2_pad_do,
		vec_out_3_pad_do,
		bidi_pad_di,
		bidi_pad_do,
		bidi_pad_en,
		ext1_pad_do,
		ext2_pad_do,
		vec_in_5,
		vec_in_0,
		vec_in_6,
		vec_in_3,
		ext0,
		vec_in_4,
		vec_in_2,
		vec_in_1,
		vec_in_7,
		ext1,
		vec_out_0,
		ext2,
		vec_out_1,
		vec_out_2,
		vec_out_3,
		bidi
	);

	// Generated Module Inputs:
		input		vec_out_0_pad_do;
		input		vec_out_1_pad_do;
		input		vec_out_2_pad_do;
		input		vec_out_3_pad_do;
		input		bidi_pad_do;
		input		bidi_pad_en;
		input		ext1_pad_do;
		input		ext2_pad_do;
	// Generated Module In/Outputs:
		inout		vec_in_5;
		inout		vec_in_0;
		inout		vec_in_6;
		inout		vec_in_3;
		inout		ext0;
		inout		vec_in_4;
		inout		vec_in_2;
		inout		vec_in_1;
		inout		vec_in_7;
		inout		ext1;
		inout		vec_out_0;
		inout		ext2;
		inout		vec_out_1;
		inout		vec_out_2;
		inout		vec_out_3;
		inout		bidi;
	// Generated Module Outputs:
		output		ext0_pad_di;
		output		vec_in_0_pad_di;
		output		vec_in_1_pad_di;
		output		vec_in_2_pad_di;
		output		vec_in_3_pad_di;
		output		vec_in_4_pad_di;
		output		vec_in_5_pad_di;
		output		vec_in_6_pad_di;
		output		vec_in_7_pad_di;
		output		bidi_pad_di;
	// Generated Wires:
		wire		ext0_pad_di;
		wire		vec_in_0_pad_di;
		wire		vec_in_1_pad_di;
		wire		vec_in_2_pad_di;
		wire		vec_in_3_pad_di;
		wire		vec_in_4_pad_di;
		wire		vec_in_5_pad_di;
		wire		vec_in_6_pad_di;
		wire		vec_in_7_pad_di;
		wire		vec_out_0_pad_do;
		wire		vec_out_1_pad_do;
		wire		vec_out_2_pad_do;
		wire		vec_out_3_pad_do;
		wire		bidi_pad_di;
		wire		bidi_pad_do;
		wire		bidi_pad_en;
		wire		ext1_pad_do;
		wire		ext2_pad_do;
		wire		vec_in_5;
		wire		vec_in_0;
		wire		vec_in_6;
		wire		vec_in_3;
		wire		ext0;
		wire		vec_in_4;
		wire		vec_in_2;
		wire		vec_in_1;
		wire		vec_in_7;
		wire		ext1;
		wire		vec_out_0;
		wire		ext2;
		wire		vec_out_1;
		wire		vec_out_2;
		wire		vec_out_3;
		wire		bidi;
// End of generated module header


	// Internal signals

	//
	// Generated Signal List
	//
		wire		mix_logic1_0; 
		wire		mix_logic1_1; 
		wire		mix_logic1_2; 
		wire		mix_logic1_3; 
		wire		mix_logic1_4; 
		wire		mix_logic1_5; 
		wire		mix_logic0_0; 
		wire		mix_logic0_1; 
		wire		mix_logic0_10; 
		wire		mix_logic0_11; 
		wire		mix_logic0_12; 
		wire		mix_logic0_13; 
		wire		mix_logic0_14; 
		wire		mix_logic0_2; 
		wire		mix_logic0_3; 
		wire		mix_logic0_4; 
		wire		mix_logic0_5; 
		wire		mix_logic0_6; 
		wire		mix_logic0_7; 
		wire		mix_logic0_8; 
		wire		mix_logic0_9; 
	//
	// End of Generated Signal List
	//


	// %COMPILER_OPTS%

	//
	// Generated Signal Assignments
	//
		assign	mix_logic1_0 = 1'b1;
		assign	mix_logic1_1 = 1'b1;
		assign	mix_logic1_2 = 1'b1;
		assign	mix_logic1_3 = 1'b1;
		assign	mix_logic1_4 = 1'b1;
		assign	mix_logic1_5 = 1'b1;
		assign	mix_logic0_0 = 1'b0;
		assign	mix_logic0_1 = 1'b0;
		assign	mix_logic0_10 = 1'b0;
		assign	mix_logic0_11 = 1'b0;
		assign	mix_logic0_12 = 1'b0;
		assign	mix_logic0_13 = 1'b0;
		assign	mix_logic0_14 = 1'b0;
		assign	mix_logic0_2 = 1'b0;
		assign	mix_logic0_3 = 1'b0;
		assign	mix_logic0_4 = 1'b0;
		assign	mix_logic0_5 = 1'b0;
		assign	mix_logic0_6 = 1'b0;
		assign	mix_logic0_7 = 1'b0;
		assign	mix_logic0_8 = 1'b0;
		assign	mix_logic0_9 = 1'b0;




	//
	// Generated Instances and Port Mappings
	//
		// Generated Instance Port Map for bidi_bpad
		pad bidi_bpad (	// pad

			.DI(bidi_pad_di),	// from EXTERNALPAD <-> Iocell connect (IO)
			.DO(bidi_pad_do),	// to EXTERNALPAD <-> Iocell connect (IO)
			.EN(bidi_pad_en),	// to EXTERNALPAD <-> Iocell connect (IO)
			.PAD(bidi)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for bidi_bpad

		// Generated Instance Port Map for ext0_ipad
		pad ext0_ipad (	// pad

			.DI(ext0_pad_di),	// from EXTERNALPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_4),	// PAD <-> Iocell connect (IO)
			.PAD(ext0)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for ext0_ipad

		// Generated Instance Port Map for ext1_opad
		pad ext1_opad (	// pad

			.DI(mix_logic0_9),	// PAD <-> Iocell connect (IO)
			.DO(ext1_pad_do),	// from bluePAD <-> Iocell connect (IO)
			.EN(mix_logic1_0),	// PAD <-> Iocell connect (IO)
			.PAD(ext1)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for ext1_opad

		// Generated Instance Port Map for ext2_opad
		pad ext2_opad (	// pad

			.DI(mix_logic0_11),	// PAD <-> Iocell connect (IO)
			.DO(ext2_pad_do),	// from bluePAD <-> Iocell connect (IO)
			.EN(mix_logic1_2),	// PAD <-> Iocell connect (IO)
			.PAD(ext2)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for ext2_opad

		// Generated Instance Port Map for vec_in_0_ipad
		pad vec_in_0_ipad (	// pad

			.DI(vec_in_0_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_1),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_0)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_0_ipad

		// Generated Instance Port Map for vec_in_1_ipad
		pad vec_in_1_ipad (	// pad

			.DI(vec_in_1_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_7),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_1)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_1_ipad

		// Generated Instance Port Map for vec_in_2_ipad
		pad vec_in_2_ipad (	// pad

			.DI(vec_in_2_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_6),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_2)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_2_ipad

		// Generated Instance Port Map for vec_in_3_ipad
		pad vec_in_3_ipad (	// pad

			.DI(vec_in_3_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_3),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_3)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_3_ipad

		// Generated Instance Port Map for vec_in_4_ipad
		pad vec_in_4_ipad (	// pad

			.DI(vec_in_4_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_5),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_4)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_4_ipad

		// Generated Instance Port Map for vec_in_5_ipad
		pad vec_in_5_ipad (	// pad

			.DI(vec_in_5_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_0),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_5)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_5_ipad

		// Generated Instance Port Map for vec_in_6_ipad
		pad vec_in_6_ipad (	// pad

			.DI(vec_in_6_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_2),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_6)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_6_ipad

		// Generated Instance Port Map for vec_in_7_ipad
		pad vec_in_7_ipad (	// pad

			.DI(vec_in_7_pad_di),	// testPAD <-> Iocell connect (IO)
			.DO(),	// PAD <-> Iocell connect (IO)
			.EN(mix_logic0_8),	// PAD <-> Iocell connect (IO)
			.PAD(vec_in_7)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_in_7_ipad

		// Generated Instance Port Map for vec_out_0_opad
		pad vec_out_0_opad (	// pad

			.DI(mix_logic0_10),	// PAD <-> Iocell connect (IO)
			.DO(vec_out_0_pad_do),	// testPAD <-> Iocell connect (IO)
			.EN(mix_logic1_1),	// PAD <-> Iocell connect (IO)
			.PAD(vec_out_0)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_out_0_opad

		// Generated Instance Port Map for vec_out_1_opad
		pad vec_out_1_opad (	// pad

			.DI(mix_logic0_12),	// PAD <-> Iocell connect (IO)
			.DO(vec_out_1_pad_do),	// testPAD <-> Iocell connect (IO)
			.EN(mix_logic1_3),	// PAD <-> Iocell connect (IO)
			.PAD(vec_out_1)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_out_1_opad

		// Generated Instance Port Map for vec_out_2_opad
		pad vec_out_2_opad (	// pad

			.DI(mix_logic0_13),	// PAD <-> Iocell connect (IO)
			.DO(vec_out_2_pad_do),	// testPAD <-> Iocell connect (IO)
			.EN(mix_logic1_4),	// PAD <-> Iocell connect (IO)
			.PAD(vec_out_2)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_out_2_opad

		// Generated Instance Port Map for vec_out_3_opad
		pad vec_out_3_opad (	// pad

			.DI(mix_logic0_14),	// PAD <-> Iocell connect (IO)
			.DO(vec_out_3_pad_do),	// testPAD <-> Iocell connect (IO)
			.EN(mix_logic1_5),	// PAD <-> Iocell connect (IO)
			.PAD(vec_out_3)	// PAD <-> Iocell connect (IO)
		);
		// End of Generated Instance Port Map for vec_out_3_opad



endmodule
//
// End of Generated Module rtl of lp_padframe
//

//
//!End of Module/s
// --------------------------------------------------------------
