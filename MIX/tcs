#!/bin/sh --
#!/bin/sh -- # -*- perl -*- -w
eval 'exec ${PERL:-`[ ! -d "$HOME/bin/perl" -a -x "$HOME/bin/perl" ] && echo "$HOME/bin/perl" || { [ -x /usr/bin/perl ] && echo /usr/bin/perl || echo /usr/local/bin/perl ; } `} -x -S $0 ${1+"$@"} ;'
if 0; # dynamic perl startup; suppress preceding line in perl
#line 6

use strict;
use warnings;
use Cwd;
use File::Basename;
use Getopt::Long qw(GetOptions);
use Pod::Text;
# use diagnostics; # -> will be set by -debug option

# +-----------------------------------------------------------------------+
# |   Copyright Micronas GmbH, Inc. 2006.                                 |
# |     All Rights Reserved.                                              |
# |                                                                       |
# | THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF MICRONAS GMBH          |
# | The copyright notice above does not evidence any actual or intended   |
# | publication of such source code.                                      |
# +-----------------------------------------------------------------------+

# +-----------------------------------------------------------------------+
# | Id           : $Id: tcs,v 1.4 2007/04/05 09:38:58 mathias Exp $  |
# | Name         : $Name:  $                                              |
# | Description  : $Description:$                                         |
# | Parameters   : -                                                      |
# | Version      : $Revision: 1.4 $                                       |
# | Mod.Date     : $Date: 2007/04/05 09:38:58 $                           |
# | Author       : $Author: mathias $                                         |
# | Phone        : $Phone: +49 89 54845 7275$                             |
# | Fax          : $Fax: $                                                |
# | Email        : $Email: mathias.megyei@micronas.com$                   |
# +-----------------------------------------------------------------------+

#******************************************************************************
# Other required packages
#******************************************************************************

use FindBin;

use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../lib/perl";
use lib "$FindBin::Bin";
use lib "$FindBin::Bin/lib/perl";
use lib getcwd() . "/lib/perl";
use lib getcwd() . "/../lib/perl";

use Log::Log4perl qw(:easy get_logger :levels);

use Micronas::MixUtils qw(mix_init $eh %OPTVAL mix_getopt_header
                          convert_in db2array replace_mac);
use Micronas::MixUtils::IO qw(init_ole
                              open_infile
                              write_outfile);

##############################################################################
# Prototypes
##############################################################################

#sub tcs_header($$);

##############################################################################
# Global Variables
##############################################################################

$::VERSION = '$Revision: 1.4 $'; # RCS Id
$::VERSION =~ s,\$,,go;

# Our local variables
# Global access to logging and environment

Log::Log4perl->init( $FindBin::Bin . '/mixlog.conf' );
my $logger = get_logger('Test_Case_Settings');

# Step 0: Init $0
mix_init();               # Presets ....

### Name of the relevant sheet
my %xls = ();
$xls{top}   = '.*';
$xls{sheet} = "Test Case Settings";

# TODO : promote that settings to some other place ...
$xls{'others'} = 'peri.*'; # Take the default.xls config key
$eh->set( 'default.xls', '.*' ); # Read in all sheets ....
$eh->set( 'macro.%UNDEF_1%', '' );
# Remove NL and CR
$eh->set( 'format.csv.style', 'stripnl,doublequote,autoquote,maxwidth' );
$eh->set( 'input.ignore.lines', '^\s*#' ); # Skip all lines with s.th. \S in ::ign
#$eh->set( 'output.input.ignore.comments', '::ignany' ); # Skip all lines with s.th. \S in ::ign

# Add your options here ....
mix_getopt_header(qw(out=s
                     sheet=s
                     column=i
                    ));

if (scalar( @ARGV) < 1) {     # Need  at least one file!!
    $logger->fatal('__F_INPUT_MISS', "\tNo input file specified!\n");
    die();
}
if (! exists($OPTVAL{column})) { # Need  at least one sheet!!
    $logger->fatal('__F_OPTION_MISS', "\tMandatory option '-column' missing!\n");
    die();
}

##############################################################################
# Step 2: Open the input file and retrieve the required table(s)
# Do a first simple conversion from Excel arrays into array of hashes

my %sheets = ();
my $outname = $OPTVAL{'out'} || 'vgch_testcase_settings';
my $verilog_ini = $outname . '_' . $OPTVAL{column} . '.ini';
my $testcase_h  = $outname . '_' . $OPTVAL{column} . '.h';

# Options sheet overwrites $xls{sheet}
if ($OPTVAL{sheet}) {
    $xls{sheet} = $OPTVAL{sheet};
}

# GLOBAL variables:
my $files = $ARGV[0];
# Open file and retrieve the desired sheet(s)
my $type = 'default';
my $conn = open_infile($files,
                       $xls{sheet},             # Select sheets ... default: "PadPinlist"
                       '',                      # no ignored sheets
                       $eh->get($type . '.req') . ',hash');

# Convert to hashes ...
foreach my $sheetname (keys %$conn) {
    if ($sheetname eq $xls{sheet}) {
        my @arrayhash = convert_in($type, $conn->{$sheetname});
        $sheets{$files}{$sheetname} = \@arrayhash;
        print("!!!!! sheetname: $sheetname\n");
    }
}

### open mif file
$logger->info("Creating mif data structure");

my $fh = new FileHandle $verilog_ini, 'w';
if (! defined($fh)) {
    $logger->fatal("Cannot open $verilog_ini");
    exit(2);
}

# If the sheets matches a client from the top, print out ...
my $aref = $sheets{$files}{$xls{sheet}};
foreach my $excel (@{$aref}) {
    my $ign      = $excel->{'::ign'};        # ::ign column
    my $s1       = defined($excel->{'::s1'}) ? $excel->{'::s1'} : ' ';
    my $s2       = defined($excel->{'::s2'}) ? $excel->{'::s2'} : ' ';
    my $s3       = defined($excel->{'::s3'}) ? $excel->{'::s3'} : ' ';
    my $s3append = defined($excel->{"::tc" . $OPTVAL{column}}) ? $excel->{"::tc" . $OPTVAL{column}} : '';
    my $t1       = defined($excel->{'::t1'}) ? $excel->{'::t1'} : '';
    my $t2       = defined($excel->{'::t2'}) ? $excel->{'::t2'} : '';

    if ($ign and $ign eq 'C-Code') {
        $fh->close();
        $fh = new FileHandle $testcase_h, 'w';
        if (! defined($fh)) {
            $logger->fatal("Cannot open $testcase_h");
            exit(2);
        }
        next;
    }
    if ($ign and $ign eq '%EMPTY%') {
        foreach my $v (($s1, $s2, $s3, $s3append, $t1, $t2)) {
            $v =~ s/^\s+//;
        }
    }

    # Write everythin into file
    $s3append =~ s/^\s+//;
    $t1 =~ s/^\s+//;
    $fh->printf("%5s %-25s %5s%s%s %s\n", $s1, $s2, $s3, $s3append, $t1, $t2);
}

$fh->close();

# Overall run-time
$logger->info('SUM: runtime: ' . (time() - $eh->get('macro.%STARTTIME%')) . ' seconds');

my $status = 0;
exit $status;

__END__

=head1 NAME

tcs - Write testcase settings file from an axcel ssheet

=head1 SYNOPSIS

=over 4

=item tcs [ -out <outfile> ] [-sheet <sheetname> ] <excel_file.xls>

=back

=head1 OPTIONS

=over 4

=item B<-out> <outfile>

Basename of the two files to be written. The default name is
F<vgch_testcase_settings>.
The column number (option B<-column> and the
suffixes B<.h> and B<.ini> are appended to the filename.

=item -sheet <sheetname>

Name of the sheet containing the ball - pin assignment.
The default name is B<Test_Case_Settings>.

=item -column <column>

<column> is the number specifying the column the values are taken from.
This option is mandatory.

=back

=cut

=head1 EXAMPLES

The following call will create the files
 F<testcase_62.ini> and F<testcase_62.h>

 module load mix/1.7
 tcs -out testcase -col 62 VCTH_pads_n_pins.xls

=cut
