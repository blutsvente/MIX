# -*- perl -*---------------------------------------------------------------
#
# +-----------------------------------------------------------------------+
# |                                                                       |
# |   Copyright Micronas GmbH, Inc. 2002.                        |
# |     All Rights Reserved.                     |
# |                                                                       |
# |                                                                       |
# | THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF MICRONAS GMBH |
# | The copyright notice above does not evidence any actual or intended   |
# | publication of such source code.                                      |
# |                                                                       |
# +-----------------------------------------------------------------------+
#
# +-----------------------------------------------------------------------+
# | Project:    Micronas - MIX / Writer                                    |
# | Modules:    $RCSfile:  Micronas::MixWriter.pm                                     |
# | Revision:   $Revision:                                             |
# | Author:     $Author:                                  |
# | Date:       $Date:                                   |
# |                                                                       |
# | Copyright Micronas GmbH, 2003                                |
# |                                                                       |
# | $Header: /tools/mix/Development/CVS/MIX/lib/perl/Micronas/MixWriter.pm,v 1.1 2003/02/03 12:56:44 wig Exp $                                                         |
# +-----------------------------------------------------------------------+
#
# The functions here provide the parsing capabilites for the MIX project.
# Take a matrix of information in some well-known format and convert it into
# intermediate format and/or source code files
#

package  Micronas::MixWriter;

require Exporter;

  @ISA = qw(Exporter);
  @EXPORT = qw(
    generate_entities
    write_entities
    write_architecture
    write_configuration
    );            # symbols to export by default
  @EXPORT_OK = qw(
    );

our $VERSION = '0.01';

use strict;
use vars qw( %entities );

# Caveat: relies on proper setting of base, pgmpath and dir in main program!
use lib "$main::base/";
use lib "$main::base/lib/perl";
use lib "$main::pgmpath/";
use lib "$main::pgmpath/lib/perl";
use lib "$main::dir/lib/perl";
use lib "$main::dir/../lib/perl";

# use lib 'h:\work\x2v\lib\perl'; #TODO Rewrite that !!!!
use Log::Agent;
use Log::Agent::Priorities qw(:LEVELS);
use Tree::DAG_Node; # tree base class

use Micronas::MixUtils qw( mix_store db2array write_excel %EH );
use Micronas::MixParser qw( %hierdb %conndb );


# Prototypes
sub _write_entities ($$$);
sub replace_mac ($$);
sub write_architecture ();
sub strip_empty ($); 

# Internal variables

#
# Templates ...
#
sub tmpl_enty () {

# TODO: Read that templates in from default location (e.g. a company default)
$EH{'template'}{'vhdl'}{'enty'}{'head'} = <<'EOD';
-- -------------------------------------------------------------
--
-- Generated Entity Declaration for %ENTYNAME%
--
-- Generated by %USER%
--           on %DATE%
--
-- !!! Do not edit this file! Autogenerated by MIX !!!
-- $Author: wig $
-- $Id: MixWriter.pm,v 1.1 2003/02/03 12:56:44 wig Exp $
-- $Date: 2003/02/03 12:56:44 $
-- $Log: MixWriter.pm,v $
-- Revision 1.1  2003/02/03 12:56:44  wig
-- Initial revision
--
--
-- Based on Mix Entity Template mix_template-e.vhd
--
-- Generator: %0% Version: %VERSION%, wilfried.gaensheimer@micronas.com
-- (C) 2003 Micronas GmbH
--
-- --------------------------------------------------------------
Library IEEE;
Use IEEE.std_logic_1164.all;
-- Use IEEE.std_logic_arith.all;
--

EOD

$EH{'template'}{'vhdl'}{'enty'}{'body'} = <<'EOD';
--
-- Start of Generated Entity %ENTYNAME%
--
entity %ENTYNAME% is
        -- Generics:
	generic(
            %GENERIC%
	);
	
	-- Generated Port Declaration:
	port(
                %PORT%
        );
end %ENTYNAME%;
--
-- End of Generated Entity %ENTYNAME%
--

EOD

$EH{'template'}{'vhdl'}{'enty'}{'foot'} = <<'EOD';
--
--!End of Entity/ies
-- --------------------------------------------------------------
EOD

}

#
# Architecture Templates ...
#
sub tmpl_arch () {

$EH{'template'}{'vhdl'}{'arch'}{'head'} = <<'EOD';
-- -------------------------------------------------------------
--
-- Generated Architecture Declaration for %ARCHNAME%
--
-- Generated by %USER%
--           on %DATE%
--
-- !!! Do not edit this file! Autogenerated by MIX !!!
-- $Author: wig $
-- $Id: MixWriter.pm,v 1.1 2003/02/03 12:56:44 wig Exp $
-- $Date: 2003/02/03 12:56:44 $
-- $Log: MixWriter.pm,v $
-- Revision 1.1  2003/02/03 12:56:44  wig
-- Initial revision
--
--
-- Based on Mix Architecture Template
--
-- Generator: %0% %VERSION%, wilfried.gaensheimer@micronas.com
-- (C) 2003 Micronas GmbH
--
-- --------------------------------------------------------------
Library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.std_logic_arith.all;

--
EOD

$EH{'template'}{'vhdl'}{'arch'}{'body'} = <<'EOD';
--
-- Start of Generated Architecture %ARCHNAME%
--
architecture %ARCHNAME% of %ENTYNAME% is 
	--
	-- Components
	--

%COMPONENTS%

	--
	-- Nets
	--

%SIGNALS%

%CONSTANTS%

begin

	--
	-- Generated Concurrent Statements
	--

%CONCURS%

	--
	-- Generated Instances
	--

%INSTANCES%

end %ARCHNAME%;

EOD

$EH{'template'}{'vhdl'}{'arch'}{'foot'} = <<'EOD';
--
--!End of Architecture/s
-- --------------------------------------------------------------
EOD

#	'vhdl' =>{
#	    'conf' => "VHDL Configuration Template String t.b.d.",
#	    'arch' => "VHDL Architecture Template String t.b.d.",
#	},
#	'verilog' =>{
#	    'wrap' => "Verilog Wrapper Template String",
#	    'file' => "Verilog File Template String",
#	},
#   },

}

sub tmpl_conf () {

# TODO: Read that templates in from default location (e.g. a company default)
$EH{'template'}{'vhdl'}{'conf'}{'head'} = <<'EOD';
-- -------------------------------------------------------------
--
-- Generated Configuration for %CONFNAME%
--
-- Generated by %USER%
--           on %DATE%
--
-- !!! Do not edit this file! Autogenerated by MIX !!!
-- $Author: wig $
-- $Id: MixWriter.pm,v 1.1 2003/02/03 12:56:44 wig Exp $
-- $Date: 2003/02/03 12:56:44 $
-- $Log: MixWriter.pm,v $
-- Revision 1.1  2003/02/03 12:56:44  wig
-- Initial revision
--
--
-- Based on Mix Entity Template mix_template-c.vhd
--
-- Generator: %0% Version: %VERSION%, wilfried.gaensheimer@micronas.com
-- (C) 2003 Micronas GmbH
--
-- --------------------------------------------------------------

EOD

$EH{'template'}{'vhdl'}{'conf'}{'body'} = <<'EOD';
--
-- Start of Generated Configuration %CONFNAME% / %ENTYNAME%
--
configuration %CONFNAME% of %ENTYNAME% is
        FOR %ARCHNAME%

	    %CONFIGURATION%

	END FOR; 
end %CONFNAME%;
--
-- End of Generated Configuration %CONFNAME%
--

EOD

$EH{'template'}{'vhdl'}{'conf'}{'foot'} = <<'EOD';
--
--!End of Configuration/ies
-- --------------------------------------------------------------
EOD

}

####################################################################
## generate_entities
## scan through hierachy and set up entities
####################################################################

=head2

generate_entities () {

Scan all of hierachy and create consistent, checked list of entities.
An entity has a name and a portmap (generic map).

Data structure will look like $entities{$name}{$port}{type|from|to|mode}.
Type will be generic or std_logic or std_ulogic ....

Relies on $hierdb{inst}{::conn}{::in|::out} to exist!

TODO: Usage of hierdb is not nice. Search for a better way.
TODO: Generics and inout mode ....

=cut

sub generate_entities () {

    for my $i ( keys( %hierdb ) ) {
        unless( exists ( $hierdb{$i}{'::entity'} ) ) {
            logwarn("Skipping instance $i with undefined entity!");
            next;
        }
        my $ent = $hierdb{$i}{'::entity'};
        if ( defined( $entities{$ent} ) ) {
            merge_entity( $ent, $hierdb{$i} );
        } else {
            create_entity( $ent, $hierdb{$i} );
        }
    }
    return;
}

#
# Create a dummy entity entry and compare the "signatures"
# Merge into old one
#
sub merge_entity ($$) {
    my $ent = shift;
    my $inst = shift;

    my %ient;
    if ( exists( $inst->{'::conn'}{'in'} ) ) {
        %ient = _create_entity( 'in', $inst->{'::conn'}{'in'} );
    } else {
        # Create dummy entry, no port ...
        %{$ient{'-- NO IN PORTs'}} = (
            'type' => '',
            'mode' => '',
            'high' => '',
            'low' => '',
        );
    }

    if ( exists( $inst->{'::conn'}{'out'} ) ) {
        %ient = ( %ient, _create_entity( 'out', $inst->{'::conn'}{'out'} ) );
    } else {
        # Create dummy entry, no port ...
        %{$ient{'-- NO OUT PORTs'}} = (
            'type' => '',
            'mode' => '',
            'high' => '',
            'low' => '',
        );
    }

    # $eq will be 1 if acceptable differences exist, else 0!
    # compare_merge_entities will sum up acceptable differences in %entities and
    # complain verbosely otherwise
    my $eq = compare_merge_entities( $ent, $entities{$ent}, \%ient );
    #TODO: use result for further decision making

    #TODO: __LEAF__, another name??
    if ( $inst->{'::treeobj'}->daughters ne "0" ) {
	$ient{'__LEAF__'}++;
    }

} # create_entity


sub compare_merge_entities ($$$) {
    my $ent = shift;
    my $rent = shift;
    my $rnew = shift;

    #    %{$entity{$ent}{'-- NO OUT PORTs'}} = (
    #       'type' => '',
    #       'mode' => '',
    #       'high' => '',
    #       'low' => '',

    my $eflag = 1; # Is equal

    # for all ports:    
    for my $p ( keys( %$rent ) ) {
        # Skip that if it does not exist in the new port map
	next if ( $p eq "__LEAF__" );
        unless( exists( $rnew->{$p} ) ) {
	    if ( $p ne "-- NO OUT PORTs" and $p ne "-- NO IN PORTs" ) {
		logwarn( "Missing port $p in entity $ent redeclaration, ignoreing!" );
		$eflag  = 0;
	    }
            next;
        }


        # type has to match
        if ( $rent->{$p}{'type'} ne $rnew->{$p}{'type'} ) {
            logwarn( "Entity type mismatch for entity $ent!" );
            $eflag = 0;
            next; #TODO: How should we handle that properly?
        # mode has to match
        } elsif ( $rent->{$p}{'mode'} ne $rnew->{$p}{'mode'} ) {
            logwarn( "Entity mode mismatch for enitity $ent!" );
            $eflag = 0;
            next;
        }
        # Take larger 'high' value
        if ( defined( $rnew->{$p}{'high'} ) and $rnew->{$p}{'high'} =~ m/^(\d+)$/o ) {
            my $val = $1;
            my $re = $rent->{$p}{'high'};
            unless ( defined( $re ) and
                     $re =~ m/^(\d+)$/o and 
                     $re >= $val ) {
                $rent->{$p}{'high'} = $val;
            }
        }
        # Take lower 'low' value
        if ( defined( $rnew->{$p}{'low'} ) and $rnew->{$p}{'low'} =~ m/^(\d+)$/o ) {
            my $val = $1;
            my $re = $rent->{$p}{'low'};
            unless ( defined( $re ) and
                     $re =~ m/^(\d+)$/o and 
                     $re <= $val ) {
                $rent->{$p}{'low'} = $val;
            }
        }
        delete( $rnew->{$p} ); # Done
    }

    # Now we add up the rest of $rnew ...
    for my $p ( keys( %$rnew ) ) {
        #
	if ( $p ne "-- NO OUT PORTs" and $p ne "-- NO IN PORTs" ) {
	    logwarn( "Declaration for entity $ent extended by $p!" );
	    $eflag = 0;
    	}
        $rent->{$p} = $rnew->{$p}; # Copy
    }
    return $eflag;
}

sub create_entity ($$) {
    my $ent = shift; # Entity name
    my $inst = shift; # Reference to instance.
    
    if ( exists( $inst->{'::conn'}{'in'} ) ) {
        %{$entities{$ent}} = _create_entity( 'in', $inst->{'::conn'}{'in'} );
    } else {
        # Create dummy entry, no port ...
        %{$entities{$ent}{'-- NO IN PORTs'}} = (
            'type' => '',
            'mode' => '',
            'high' => '',
            'low' => '',
        );
    }

    if ( exists( $inst->{'::conn'}{'out'} ) ) {
        %{$entities{$ent}} = ( %{$entities{$ent}} , _create_entity( 'out', $inst->{'::conn'}{'out'} ));
    } else {
        # Create dummy entry, no port ...
        %{$entities{$ent}{'-- NO OUT PORTs'}} = (
            'type' => '',
            'mode' => '',
            'high' => '',
            'low' => '',
        );
    }

    if ( $inst->{'::treeobj'}->daughters() ne "0" ) {
	$entities{$ent}{'__LEAF__'}++;
    } else {
	$entities{$ent}{'__LEAF__'} = 0;
    }
} # create_entity

sub _create_entity ($$) {
    my $io = shift;
    my $ri = shift;

    my %res = ();
    for my $i ( keys( %$ri ) ) {
        my $sport = $ri->{$i};

	#
	# Filter out %HIGH% and %LOW% ...or __LOGIC*
	#
	# Willi, NO. The pins/ports are needed!
	# if ( $i eq "%HIGH%" or $i eq "%LOW%"
	#    or $i =~ m,^\s*__LOGIC,o ) {
	#    next; 
	# }
	
        unless( defined( $conndb{$i} ) ) {
            logwarn("Illegal signal name $i referenced!");
            next;
        }
        for my $port ( keys( %$sport ) ) {
            # my $index = $signal->{$port};
            # for my $ii ( split( ',', $index ) ) {
            #    #mode = in

	    #
	    # Duplicate signals will be caught by the compare_and_merge_entitiy
	    # function
	    #
            %{$res{$port}} = (
                'mode' => $io, #TODO: do some sanity checking! e.g. high, low might be
                                    # undefined, check if bus vs. bit. and consider the ::mode!
                'type' => $conndb{$i}{'::type'},  #|| 'signal', # type defaults to signal
                'high' => $conndb{$i}{'::high'},  # set default to '' string
                'low'  => $conndb{$i}{'::low'},   # set default to '' string
            );
        }
	# $res{'__SIGNAL__'}{$i}=; # Remember signals connected
    }
    return %res;
}

####################################################################
## write_entities
## write entities
####################################################################

=head2

write_entities () {

Write entity into output file(s).

=cut

sub write_entities () {

    # Set up entity template;
    tmpl_enty();
    
    # open output file
    my $efname = $EH{'outenty'};
    if ( $efname =~m/^ENTY/o ) {
	# Write each entity in a file of it's own
	for my $i ( sort( keys( %entities ) ) ) {

		# Skip leaf entities ...
    		if ( $EH{'output'}{'generate'}{'enty'} eq "noleaf" and
		    $entities{$i}{'__LEAF__'} == 0 ) {
		    next;
		}
		my $filename = $i . $EH{'postfix'}{'POSTFIX_ENTY'} . "-e.vhd";
	    	_write_entities( $i, $filename, \%entities )
	}
    } else {
	_write_entities( "__COMMON__", $efname, \%entities );
    }

    return;

}


#
# Do the work: Collect ports and generics from %entities.
# Print out and also save port and generics for later reusal (e.g. architecture)
#
sub _write_entities ($$$) {
    my $ehname = shift;
    my $file = shift;
    my $ae = shift;

    my %macros = %{$EH{'macro'}};

    $macros{'%ENTYNAME%'} = $ehname;
    $macros{'%VERSION%'} = $::VERSION;
    $macros{'%0%'} = $::pgm;
    $macros{'%DATE%'} = "" . localtime();
    $macros{'%USER%'} = "W_UNKNOWN_USERNAME";
    if ( $^O =~ m,^mswin,io ) {
	if ( defined( $ENV{'USERNAME'} ) ) {
	        $macros{'%USER%'} = $ENV{'USERNAME'};
	}
    } elsif ( defined( $ENV{'LOGNAME'} ) ) {
		$macros{'%USER%'} = $ENV{'LOGNAME'};
    }

    if ( -r $file ) {
	logtrc(INFO, "Entity declaration file $file will be overwritten!" );
    }
    
    unless( open( ENTY, "> $file" ) ) {
        logwarn( "Cannot open file $file to write entity declarations: $!" );
        return;
    }

    # Add header
    my $tpg = $EH{'template'}{'vhdl'}{'enty'}{'body'};
    my $et = replace_mac( $EH{'template'}{'vhdl'}{'enty'}{'head'}, \%macros);    

    #
    # Collect generics and ports ...
    #
    my @keys = ( $ehname eq "__COMMON__" ) ? keys( %$ae ) : ( $ehname );
    for my $e ( sort( @keys ) ) {

	# Do not write entities for leaf blocks ...
	#TODO: Check
	if ( $EH{'output'}{'generate'}{'enty'} eq "noleaf" and
	    $ae->{$e}{'__LEAF__'} == 0  ) {
		next;
	}
	if ( $e eq "W_NO_ENTITY" ) { next; };
	
	$macros{'%ENTYNAME%'} = $e;
	my $gent = "\t\t\t-- generated\n";
	my $port = "\t\t\t-- generated\n";
	my $pd = $ae->{$e};
	for my $p ( sort ( keys( %{$pd} ) ) ) {
	    next if ( $p eq "__LEAF__" );
	    
	    my $pdd = $pd->{$p};
	    if ( $pdd->{'mode'} =~ m/generic/io ) {
		# Generic
		$gent .= "\t\t\t" . $p . "\t: " . $pdd->{'type'} . "\t:= " . $pdd->{'value'} . "\n";
	    } elsif (	defined( $pdd->{'high'} ) and
			defined( $pdd->{'low'} ) and
			$pdd->{'high'} =~ m/^\d+$/o and $pdd->{'low'} =~ m/^\d+$/ ) {
		# Signal ...from high to low. Ignore everything not matching
		# this pattern (e.g. only one bound set ....)
		if ( $pdd->{'high'} > $pdd->{'low'} ) {
		    $port .= "\t\t\t" . $p . "\t: " . $pdd->{'mode'} . "\t" . $pdd->{'type'} .
			"(" . $pdd->{'high'} . " downto " . $pdd->{'low'} . ");\n";
		} else {
	    	    $port .= "\t\t\t" . $p . "\t: " . $pdd->{'mode'} . "\t" . $pdd->{'type'} .
			"(" . $pdd->{'high'} . " to " . $pdd->{'low'} . ");\n";
		}
	    } else {
		    $port .= "\t\t\t" . $p . "\t: " . $pdd->{'mode'} . "\t" . $pdd->{'type'} . ";\n";
	    }
	}
	#Get rid of trailing ;, replace %MACs%
	$port =~ s/;\n$/\n\t\t\t-- end of generated port/;
	$gent =~ s/;\n$/\n\t\t\t-- end of generated generic/;

	# Store ports and generics
	$entities{$e}{'__PORTTEXT__'} = $port . "\n";
	$entities{$e}{'__GENERICTEXT__'} = $gent . "\n";
	
	$macros{'%PORT%'} = $port;
	$macros{'%GENERIC%'} = $gent;

	$et .= replace_mac( $tpg, \%macros );
	
    }
    
    $et .=  $EH{'template'}{'vhdl'}{'enty'}{'foot'};

    $et = replace_mac( $et, \%macros );

    $et = strip_empty( $et );
    
    print( ENTY $et );

    close( ENTY ) or
	logwarn( "Cannot close file $file: $!" );
}

sub replace_mac ($$) {
    my $text = shift;
    my $rmac = shift;

    my $mkeys = "(" . join( '|', keys( %$rmac ) ) . ")";

    $text =~ s/$mkeys/$rmac->{$1}/mg;

    return $text;
}

#         'entities' => {
#                         'ddrv' => {
#					'__LEAF__' = 0...,
#                                      'current_time' => {
#                                                          'low' => '0',
#                                                          'mode' => 'in',
#                                                          'high' => '3',
#                                                          'type' => 'std_ulogic_vector'
#                                                        },
#                                      'key_buffer' => {
#                                                        'low' => '0',
#                                                        'mode' => 'in',
#                                                        'high' => '3',
#                                                        'type' => 'std_ulogic_vector'
#                                                      },	    

####################################################################
## write_architecture
## write architecture VHDL files
####################################################################

=head2

write_architecture () {

Write architecture into output file(s).

=cut

sub write_architecture () {

    # Set up architecture template;
    tmpl_arch();
    
    # open output file
    my %seen = ();
    my $efname = $EH{'outarch'};
    if ( $efname =~m/^ARCH/o ) {
	# Write each architecture in a file of it's own
	for my $i ( sort( keys( %hierdb ) ) ) {
		# Skip it if it was seen before
		#TODO: sort be order of hierachy
		#TODO: will that be unique?
		my $e = $hierdb{$i}{'::entity'};

	    	# Should we print it?
		next if ( $e eq "W_NO_ENTITY" );
		if ( $EH{'output'}{'generate'}{'arch'} eq "noleaf" and
		    not $hierdb{$i}{'::treeobj'}->daughters ) {
		    next;
		}
		unless ( exists( $seen{$e} ) ) {
		    $seen{$e} = 1;  #TODO ?????
		    my $filename = $e . $EH{'postfix'}{'POSTFIX_ARCH'} . "-a.vhd";
		    _write_architecture( $i, $e, $filename, \%hierdb );
		}
	}
    } else {
	_write_architecture( "__COMMON__", "__COMMON__", $efname, \%hierdb );
    }

    return;

}

####################################################################
## gen_instmap
## generate an instance map 
####################################################################

=head2

gen_instmap ($) {

Return an port map for the instance and a list of in and out signals

=cut

sub gen_instmap ($) {
    my $inst = shift;

    #
    #TODO: Generic map!
    #

    my $map = "\t\t\t-- Generated Instance Port Map for $inst\n";
    my @in = ();
    my @out = ();

    $map .= "\t\t\t$inst: $hierdb{$inst}{'::entity'} PORT MAP(\n";

    #
    # Iterate through all signals attached to that instance:
    #TODO: make port map a better data structure to be joined by this
    # module and the %entities data structure
    #
    my $rinstc = $hierdb{$inst}{'::conn'}; #TODO Better use entitiy??!!
    for my $s ( sort( keys( %{$rinstc->{'in'}}) )  ) {
	for my $p ( sort( keys( %{$rinstc->{'in'}{$s}} ) ) ) {
	    $map .= "\t\t\t\t$p => $s,\n";
	    push( @in, $s );
	}
    }
    for my $s ( sort( keys( %{$rinstc->{'out'}} ) ) ) {
	for my $p ( sort( keys( %{$rinstc->{'out'}{$s}} ) ) ) {
	    $map .= "\t\t\t\t$p => $s,\n";
	    push( @out, $s );
	}
    }
    $map =~ s/,\n$/\n/o;
    $map .= "\t\t\t);\n\t\t\t-- End of Generated Instance Port Map\n";
    
    return( $map, \@in, \@out);
}

#
# Do the work: Collect ports and generics from %entities.
# Print out and also save port and generics for later reusal (e.g. architecture)
#
sub _write_architecture ($$$$) {
    my $instance = shift;
    my $entity = shift;
    my $filename = shift;
    my $ae = shift;

    my %macros = %{$EH{'macro'}}; # Take predefined macro replacement set

    $macros{'%ENTYNAME%'} = $entity;
    $macros{'%ARCHNAME%'} = $entity . $EH{'postfix'}{'POSTFIX_ARCH'};
    $macros{'%VERSION%'} = $::VERSION;
    $macros{'%0%'} = $::pgm;
    $macros{'%DATE%'} = "" . localtime();
    $macros{'%USER%'} = "W_UNKNOWN_USERNAME";
    if ( $^O =~ m,^mswin,io ) {
	if ( defined( $ENV{'USERNAME'} ) ) {
	        $macros{'%USER%'} = $ENV{'USERNAME'};
	}
    } elsif ( defined( $ENV{'LOGNAME'} ) ) {
		$macros{'%USER%'} = $ENV{'LOGNAME'};
    }

    if ( -r $filename ) {
	logtrc(INFO, "Architecture declaration file $filename will be overwritten!" );
    }
    

    # Add header
    my $tpg = $EH{'template'}{'vhdl'}{'arch'}{'body'};
    my $et = replace_mac( $EH{'template'}{'vhdl'}{'arch'}{'head'}, \%macros);    

    my %seenthis = ();
    my $contflag = 0;
    #
    # Go through all instances and generate a architecture for each !entity!
    #TODO: or instance?
    #
    my @keys = ( $instance eq "__COMMON__" ) ? keys( %$ae ) : ( $instance );
    for my $i ( sort( @keys ) ) {
	
	if ( $i eq "W_NO_ENTITY" ) { next; };

	# Do not write architecture for leaf cells ...
	#TODO: Check
	if ( $EH{'output'}{'generate'}{'arch'} eq "noleaf" and
	    $ae->{$i}{'::treeobj'}->daughters eq "" ) {
	    next;
	}

	$contflag = 1;	
	
	my $aent = $ae->{$i}{'::entity'};
	$macros{'%ENTYNAME%'} = $aent;
	$macros{'%ARCHNAME%'} = $aent . $EH{'postfix'}{'POSTFIX_ARCH'};
	$macros{'%CONCURS%'} = "\t-- Generated Signal Assignments\n";
	$macros{'%CONSTANTS%'} = "\t--Generated Constant Declarations\n";

	#
	# Collect components by looking through all our daughters
	#
	$macros{'%COMPONENTS%'} = "\t-- Generated Components\n";
	$macros{'%INSTANCES%'} = "\t-- Generated Instances and Port Mappings\n";

	my %seen = ();
	my @in = ();
	my @out = ();
	#
	# Inform user about rewrite of architecture for this entity ...
	#
	if ( exists( $seenthis{$aent} ) ) {
	    logwarn( "Possibly rewriting architecture for entity $aent, instance $i!" );
	} else {
	    $seenthis{$aent} = 1;
	}
	
	my $node = $ae->{$i}{'::treeobj'};
	for my $daughter ( sort( { $a->name cmp $b->name } $node->daughters ) ) {
	    my $d_name = $daughter->name;
	    my $d_enty = $hierdb{$d_name}{'::entity'};

	    #
	    # Component declaration (?):
	    # 
	    unless( exists( $seen{$d_enty} ) ) {
		$macros{'%COMPONENTS%'} .= "\t\t\tcomponent $d_enty\n" .
			"\t\t\tgeneric (\n" . $entities{$d_enty}{'__GENERICTEXT__'} .
			"\n\t\t\t);\n" .
			"\t\t\tport (\n" . $entities{$d_enty}{'__PORTTEXT__'} .
			"\n\t\t\t);\n" .
			"\t\t\tend component;\n\t\t-- ---------\n\n";
		$seen{$d_enty} = 1;
	    }

	    #
	    # Instances
	    #
	    my( $imap, $r_in, $r_out );
	    ( $imap, $r_in, $r_out ) = gen_instmap( $d_name );
	    $macros{'%INSTANCES%'} .= $imap;
	    push( @in, @$r_in );
	    push( @out, @$r_out );
	}

	#
	# Look through current instance and extract constant declarations
	#
	# for my $const ( %{$hierdb{$i}} ) {
	#    if ( $const->{'::mode'} and $const->{'::mode'} eq "C" ) {
	#	#read value from out field, 
	#
	# extract signals from @in and @out array
	#
	my %aeport = ();
	# Uniquify
	for my $ii ( @out ) { $aeport{$ii}{'out'} = 1; };
	for my $ii ( @in )   { $aeport{$ii}{'in'} = 1; };
	my $signaltext = "\t\t\t--\n\t\t\t-- Generated Signals\n\t\t\t--\n";
	for my $ii ( sort( keys( %aeport ) ) ) {
	    my $s = $conndb{$ii};
	    my $type = $s->{'::type'};
	    my $high = $s->{'::high'};
	    my $low = $s->{'::low'};
	    # The signal definition should be consistent here!
	    my $dt = "";

	    if ( $ii =~ m/^\s*__LOGIC(0|1)_BUS__/  ) {#! not used here
		# Define signal as below and assign it to zero/one, wire port to it!
		#TODO: This works for busses. Will it do for single signal?
		#TODO: What happens to bus slices?
		$macros{'%CONCURS%'} .= "\t\t\t__LOGIC$1__ <= ( others => '$1' );\n";
	    } elsif ( $ii =~ m/^\s*__LOGIC(0|1)__/  ) {#! not used here
		# Define signal as below and assign it to zero/one, wire port to it!
		#TODO: This works for busses. Will it do for single signal?
		#TODO: What happens to bus slices?
		$macros{'%CONCURS%'} .= "\t\t\t__LOGIC$1__ <= '$1';\n";
	    } elsif ( $ii =~ m,^\s*(%HIGH|%LOW)_BUS,o ) {
		my $logicv = ( $1 eq '%HIGH' ) ? '1' : '0';
		$macros{'%CONCURS%'} .= "\t\t\t$EH{'macro'}{$ii} <= ( others => '$logicv' );\n";
	    } elsif ( $ii =~ m,^\s*(%HIGH%|%LOW%),o ) {
	    	my $logicv = ( $1 eq '%HIGH' ) ? '1' : '0';
		$macros{'%CONCURS%'} .= "\t\t\t$EH{'macro'}{$ii} <= '$logicv';\n";
	    }
	    if ( defined( $high ) and $high =~ m/^\d+$/o and
		 defined( $low ) and $low =~ m/^\d+$/o ) {
		    if ( $low < $high ) {
			$dt = "($high downto $low)";
		    } else {
			$dt = "($high to $low)";
		    }
	    }
	    $signaltext .= "\t\t\tsignal\t$ii\t: $type$dt;\n";
	}
	$signaltext .= "\t\t\t--\n\t\t\t-- End of Generated Signals\n\t\t\t--\n";
	$macros{'%SIGNALS%'} = $signaltext;
	$et .= replace_mac( $tpg, \%macros );

    }

    return unless ( $contflag ); #Print only if you found s.th. to print

    $et .=  $EH{'template'}{'vhdl'}{'enty'}{'foot'};

    $et = replace_mac( $et, \%macros );

    $et = strip_empty( $et );

    #
    # Write here
    #
    unless( open( ARCH, "> $filename" ) ) {
        logwarn( "Cannot open file $filename to write architecture declarations: $!" );
        return;
    }

    
    print( ARCH $et );

    close( ARCH ) or
	logwarn( "Cannot close file $filename: $!" );
}

sub strip_empty ($) {
    my $text = shift;

    #
    # Remove empty "generic" statments
    #
    #        -- Generics:
    #			generic (
    #		-- generated
    #
    #
    #		);
    $text =~ s,\s*--\s*Generics:\s+generic\s*\(\s+--\s+generated\s+\);,,sog;
    $text =~ s,generic\s*\(\s+--\s+generated\s+\);,,sog;

    return $text;
}
    
####################################################################
## write_configuration
## write configurarion for VHDL files
####################################################################

=head2

write_configuration () {

Write configuration into output file(s).

=cut

sub write_configuration () {

    # Set up configuration template;
    tmpl_conf();
    
    # open output file
    my %seen = ();
    my $efname = $EH{'outconf'};
    if ( $efname =~m/^CONF/o ) {
	# Write each configuration in a file of it's own
	for my $i ( sort( keys( %hierdb ) ) ) {
		# Skip it if it was seen before
		#TODO: sort by order of hierachy??

    		if ( $EH{'output'}{'generate'}{'conf'} eq "noleaf" and
		    not $hierdb{$i}{'::treeobj'}->daughters ) {
		    next;
		}

		my $e = $hierdb{$i}{'::entity'};
		unless ( exists( $seen{$e} ) ) {
		    # my %a; $a{$e} = %{$hierdb{$i}}; # Take one slice from the hierdb ...
		    $seen{$e} = 1;  #TODO ?????
		    my $filename = $e . $EH{'postfix'}{'POSTFIX_CONF'} . "-c.vhd";
		    _write_configuration( $i, $e, $filename, \%hierdb );
		}
	}
    } else {
	_write_configuration( "__COMMON__", "__COMMON__", $efname, \%hierdb );
    }

    return;

}

#
# Do the work:
#
sub _write_configuration ($$$$) {
    my $instance = shift;
    my $entity = shift;
    my $filename = shift;
    my $ae = shift;

    my %macros = %{$EH{'macro'}}; # Take predefined macro replacement set

    $macros{'%INSTNAME%'} = $instance;
    $macros{'%ARCHNAME%'} = $entity . $EH{'postfix'}{'POSTFIX_ARCH'};    
    $macros{'%CONFNAME%'} = $entity . $EH{'postfix'}{'POSTFIX_CONF'}; 
    $macros{'%VERSION%'} = $::VERSION;
    $macros{'%0%'} = $::pgm;
    $macros{'%DATE%'} = "" . localtime();
    $macros{'%USER%'} = "W_UNKNOWN_USERNAME";
    if ( $^O =~ m,^mswin,io ) {
	if ( defined( $ENV{'USERNAME'} ) ) {
	        $macros{'%USER%'} = $ENV{'USERNAME'};
	}
    } elsif ( defined( $ENV{'LOGNAME'} ) ) {
		$macros{'%USER%'} = $ENV{'LOGNAME'};
    }

    if ( -r $filename ) {
	logtrc(INFO, "Configuration definition file $filename will be overwritten!" );
    }
    
    unless( open( CONF, "> $filename" ) ) {
        logwarn( "Cannot open file $filename to write configuration definitions: $!" );
        return;
    }

    # Add header
    my $tpg = $EH{'template'}{'vhdl'}{'conf'}{'body'};
    my $et = replace_mac( $EH{'template'}{'vhdl'}{'conf'}{'head'}, \%macros);    

    my %seenthis = ();

    #
    # Go through all instances and generate a configuration for each !entity!
    #TODO: or instance?
    #
    my @keys = ( $instance eq "__COMMON__" ) ? keys( %$ae ) : ( $instance );
    for my $i ( sort( @keys ) ) {

	# Do not write configurations for leaf cells ...
	#TODO: Check
	if ( $EH{'output'}{'generate'}{'conf'} eq "noleaf" and
	    $hierdb{$i}{'::treeobj'}->daughters == 0  ) {
		next;
	}
	# Skip some internals
	if ( $i eq "W_NO_ENTITY" ) { next; };
	if ( $i eq "W_NO_CONFIG" ) { next; };
    
	my $aent = $ae->{$i}{'::entity'};
	$macros{'%ENTYNAME%'} = $aent;
	#TODO: $macros{'%CONFNAME%' = $aent . $EH{'postfix'}{'POSTFIX_CONF'};
	$macros{'%CONFNAME%'} = $ae->{$i}{'::config'};
	$macros{'%ARCHNAME%'} = $aent . $EH{'postfix'}{'POSTFIX_ARCH'};

	#
	# Collect components by looking through all our daughters
	#
	$macros{'%CONFIGURATION%'} = "\t-- Generated Configuration\n";

	# my %seen = ();
	my @in = ();
	my @out = ();
	#
	# Inform user about rewrite of architecture for this entity ...
	#
	if ( exists( $seenthis{$aent} ) ) {
	    logwarn( "Possibly rewriting configuration for entity $aent, instance $i!" );
	} else {
	    $seenthis{$aent} = 1;
	}
	
	my $node = $ae->{$i}{'::treeobj'};
	for my $daughter ( sort( { $a->name cmp $b->name } $node->daughters ) ) {
	    my $d_name = $daughter->name;
	    my $d_enty = $hierdb{$d_name}{'::entity'};
	    my $d_conf = $hierdb{$d_name}{'::config'};

	    #
	    # Component declaration (?):
	    # 
	    # unless( exists( $seen{$d_enty} ) ) {
		$macros{'%CONFIGURATION%'} .= "\t\t\tFOR $d_name : $d_enty\n" .
			"\t\t\t\tuse configuration work.$d_conf;\n" .
			"\t\t\tEND FOR;\n";
	    # $seen{$d_enty} = 1;
	    # }
	}
	$et .= replace_mac( $tpg, \%macros );

    }
     
    $et .=  $EH{'template'}{'vhdl'}{'conf'}{'foot'};
    $et = replace_mac( $et, \%macros );
    
    print( CONF $et );

    close( CONF ) or
	logwarn( "Cannot close file $filename: $!" );
}

1;

#!End