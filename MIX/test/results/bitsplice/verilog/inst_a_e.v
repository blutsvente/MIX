// -------------------------------------------------------------
//
// Generated Architecture Declaration for rtl of inst_a_e
//
// Generated
//  by:  wig
//  on:  Fri Dec 19 16:07:22 2003
//  cmd: H:\work\mix_new\mix\mix_0.pl -strip -nodelta ../../bitsplice.xls
//
// !!! Do not edit this file! Autogenerated by MIX !!!
// $Author: wig $
// $Id: inst_a_e.v,v 1.1 2003/12/22 08:36:26 wig Exp $
// $Date: 2003/12/22 08:36:26 $
// $Log: inst_a_e.v,v $
// Revision 1.1  2003/12/22 08:36:26  wig
// Added testcase bitsplice.
//
//
// Based on Mix Verilog Architecture Template built into RCSfile: MixWriter.pm,v 
// Id: MixWriter.pm,v 1.36 2003/12/05 14:59:29 abauer Exp 
//
// Generator: mix_0.pl Revision: 1.25 , wilfried.gaensheimer@micronas.com
// (C) 2003 Micronas GmbH
//
// --------------------------------------------------------------


`timescale 1ns / 1ps

//
//
// Start of Generated Module rtl of inst_a_e
//

	// No `defines in this module

module inst_a_e
	//
	// Generated module inst_a
	//
		(
		p_mix_test1_go,
		widesig_o
		);
		// Generated Module Outputs:
		output		p_mix_test1_go;
		output	[31:0]	widesig_o;
		// Generated Wires:
		wire		p_mix_test1_go;
		wire	[31:0]	widesig_o;
		// End of generated module header


    // Internal signals

		//
		// Generated Signal List
		//
			wire	[7:0]	s_port_offset_01; 
			wire	[7:0]	s_port_offset_02; 
			wire	[1:0]	s_port_offset_02b; 
			wire  test1; // __W_PORT_SIGNAL_MAP_REQ
			wire	[4:0]	test2; 
			wire	[3:0]	test3; 
		//
		// End of Generated Signal List
		//


    // %COMPILER_OPTS%

	// Generated Signal Assignments
			assign	p_mix_test1_go = test1;  // __I_O_BIT_PORT


    //
    // Generated Instances
    // wiring ...

	// Generated Instances and Port Mappings
		// Generated Instance Port Map for inst_aa
		ent_aa inst_aa(
			.port_1(test1), // Use internally test1
			.port_2(test2[0]), // Bus with hole in the middleNeeds input to be happy
			.port_3(test3[0]), // Bus combining o.k.
			.port_o(s_port_offset_01),
			.port_o02[10:3](s_port_offset_02),  // __W_PORT// __E_CANNOT_COMBINE_SPLICES
			.port_o02[1:0](s_port_offset_02b)  // __W_PORT// __E_CANNOT_COMBINE_SPLICES
		);
		// End of Generated Instance Port Map for inst_aa

		// Generated Instance Port Map for inst_ab
		ent_ab inst_ab(
			.port_2(test2[1]), // Bus with hole in the middleNeeds input to be happy
			.port_3(test3[1]), // Bus combining o.k.
			.port_ab_1(test1), // Use internally test1
			.port_i(s_port_offset_01),
			.port_i02[10:3](s_port_offset_02),  // __W_PORT// __E_CANNOT_COMBINE_SPLICES
			.port_i02[2:1](s_port_offset_02b)  // __W_PORT// __E_CANNOT_COMBINE_SPLICES
		);
		// End of Generated Instance Port Map for inst_ab

		// Generated Instance Port Map for inst_ac
		ent_ac inst_ac(
			.port_2(test2[3]), // Bus with hole in the middleNeeds input to be happy
			.port_3(test3[2]) // Bus combining o.k.
		);
		// End of Generated Instance Port Map for inst_ac

		// Generated Instance Port Map for inst_ad
		ent_ad inst_ad(
			.port_2(test2[4]), // Bus with hole in the middleNeeds input to be happy
			.port_3(test3[3]) // Bus combining o.k.
		);
		// End of Generated Instance Port Map for inst_ad

		// Generated Instance Port Map for inst_ae
		ent_ae inst_ae(
			.port_2(test2), // Bus with hole in the middleNeeds input to be happy
			.port_3(test3) // Bus combining o.k.
		);
		// End of Generated Instance Port Map for inst_ae



endmodule
//
// End of Generated Module rtl of inst_a_e
//
//
//!End of Module/s
// --------------------------------------------------------------
