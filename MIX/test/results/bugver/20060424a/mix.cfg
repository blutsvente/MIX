#
# disable check for lower-case ports
MIXCFG check.name.all na

# date: 20030527: Default options for testcases!
# MIXCFG output.generate.arch leaf
MIXCFG output.generate.conf noleaf
MIXCFG output.generate.enty leaf
#
# Input sheets:
#
# MIXCFG conn.xls CONN.*
MIXCFG hier.xls H_20060424a
MIXCFG conn.xls C_20060424a
#
# MIXCFG io.xls IO.*
MIXCFG io.xls IO_20060424a

MIXCFG output.generate.delta 1
MIXCFG output.delta sort,remove,ignorecase
MIXCFG outarch ARCH
MIXCFG outenty ENTY
MIXCFG outconf CONF

# Adding path for entity verifications:
# MIXCFG check.hdlout.path AVFB_Leaf
#   'mode' => "entity,leaf,generated,ignorecase", -> all, not only leafs ...
#     ev. anstelle von generated -> inpath
# MIXCFG check.hdlout.mode arch,dcleaf,generated,ignorecase
# MIXCFG check.hdlout.mode entity,dcleaf,generated,ignorecase

# MIXCFG macro.%PREFIX_IOC_GEN% iom_
MIXCFG postfix.PREFIX_IOC_GEN iom_
MIXCFG iocell.name %PREFIX_IOC_GEN%%::name%
MIXCFG pad.name %PREFIX_PAD_GEN%%::name%

# Adding clk, pad and xo to give them directions ...
MIXCFG iocell.in dot,ena,kep,drv,xin,ret_i,dot_i,ena_i,slow
MIXCFG iocell.inout pad,adio1,adio2,adio3,adio4,ario1,ario2,ario3,ario4
MIXCFG iocell.out ret,xout,ret_o,dot_o,ena_o
MIXCFG iocell.select bus,const

# Take signal name as generated port name!
MIXCFG postfix.PREFIX_PORT_GEN %EMPTY%
# MIXCFG postfix.POSTFIX_PORT_GEN %EMPTY%

# MIXCFG output.generate.portmapsort ::bundle,inout,alpha,debug
MIXCFG output.generate.portmapsort ::bundle,inout,alpha

# minor: allow creation of iocells with embedded pads ..
#!wig20040330
MIXCFG iocell.embedded pad

#!wig20040805: use intermediate signals for typecast
MIXCFG output.generate.workaround.typecast intsig

#!mpit20050216: generate inout mode port without propagation to toplevel
MIXCFG output.generate.xinout to_tuxco_xin,to_tuxco_xout

# type of register-master (don't change)
MIXCFG i2c.regmas_type AVFB

# IMPORTANT: sheet name in register-master xls file
MIXCFG i2c.xls vi2c

# define view to generate (E_VR_AD -> Specman E file) 
# MIXCFG reg_shell.type E_VR_AD
MIXCFG reg_shell.type HDL-vgch-rs

# name of primary clock and reset (also OCP bus clock)
MIXCFG reg_shell.bus_clock clk_i2c
MIXCFG reg_shell.bus_reset res_i2c_n

# set default register width to 16 instead of 32 
MIXCFG reg_shell.regwidth 16
MIXCFG reg_shell.datawidth 16
MIXCFG reg_shell.addrwidth 17

# if 1, create one config register block per clock domain
MIXCFG reg_shell.multi_clock_domains 0

# number of multicycles for read-mux (only meaningful if reg_shell.read_pipeline_lvl==0)
MIXCFG reg_shell.read_multicycle 0

# read-pipeline generation control; the value is the number of address bits, for which
# a pipeline stage will be inserted; set to 0 or high value to disable
MIXCFG reg_shell.read_pipeline_lvl 5

# if 1, infer HDL clock-gating cells
MIXCFG reg_shell.infer_clock_gating 0

# if 1, infer SystemVerilog assertions
MIXCFG reg_shell.infer_sva 1

# if 1, prefix field names in HDL output with register names
MIXCFG reg_shell.use_reg_name_as_prefix 0

# testcase expected error messages check:
MIXCFG log.limit.test.__E_ 0

#!End
